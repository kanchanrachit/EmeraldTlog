{
	"openapi": "3.0.1",
	"info": {
		"title": "transaction-document",
		"description": "Service API for TDM Document handling. Copyright 2020 NCR Corporation",
		"contact": {},
		"license": {
			"name": "NCR Corporation - Copyright 2020"
		},
		"version": "2.42.0-1-20230428132344-9bcded3"
	},
	"servers": [
		{
			"url": "https://api.ncr.com/transaction-document/v2"
		}
	],
	"tags": [
		{
			"name": "/transaction-documents",
			"description": "Service API for TDM Document handling."
		},
		{
			"name": "/providers",
			"description": "Service for provisioning raw transaction providers."
		},
		{
			"name": "/subscriptions",
			"description": "Service for provisioning webhook subscriptions to TDM topics."
		}
	],
	"paths": {
		"/providers/versions": {
			"post": {
				"tags": [
					"/providers"
				],
				"summary": "Create Provider",
				"description": "Creates a raw transaction provider version for the provided provider name and version. The provided functions need to exist for the provider to be created.",
				"operationId": "createProvider",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProviderRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Provider version successfully created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderViewData"
								}
							}
						}
					},
					"400": {
						"description": "A payload constraint violation occurred.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"409": {
						"description": "Provider version already exists for the name and version",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResourceAlreadyExistsException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_PROVIDER_CREATE"
					]
				}
			}
		},
		"/providers/{name}/custom-properties": {
			"get": {
				"tags": [
					"/providers"
				],
				"summary": "Get All Custom Properties",
				"description": "Gets all custom properties of specified provider.",
				"operationId": "getCustomProperties",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageNumber",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "pageSize",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 200
						}
					},
					{
						"name": "name",
						"in": "path",
						"description": "The provider name to be used when reading custom properties.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Custom Properties successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetCustomPropertyResponse"
								}
							}
						}
					},
					"400": {
						"description": "A payload constraint violation occurred.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_CUSTOM_PROPERTY_GET_ALL"
					]
				}
			},
			"post": {
				"tags": [
					"/providers"
				],
				"summary": "Create Custom Property",
				"description": "Creates a custom property for the provided provider name. ",
				"operationId": "createCustomProperty",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "path",
						"description": "The name of the provider",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "The name of the provider."
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CustomPropertyData"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "custom property successfully created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CustomPropertyViewData"
								}
							}
						}
					},
					"400": {
						"description": "A payload constraint violation occurred.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"409": {
						"description": " already exists for the name",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResourceAlreadyExistsException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_CUSTOM_PROPERTY_CREATE"
					]
				}
			}
		},
		"/providers/{name}/custom-properties/{customPropertyName}": {
			"delete": {
				"tags": [
					"/providers"
				],
				"summary": "Delete Custom Property",
				"description": "Deletes a custom property.",
				"operationId": "deleteCustomProperty",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "customPropertyName",
						"in": "path",
						"description": "The name of the custom property",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "The name of the custom property."
						}
					},
					{
						"name": "name",
						"in": "path",
						"description": "The name of the provider",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "The name of the provider."
						}
					}
				],
				"responses": {
					"204": {
						"description": "Custom Property successfully deleted."
					},
					"400": {
						"description": "A payload constraint violation occurred.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"404": {
						"description": "Custom property for the name does not exist",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResourceDoesNotExistException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_CUSTOM_PROPERTY_DELETE"
					]
				}
			}
		},
		"/providers/{name}/versions/{version}": {
			"get": {
				"tags": [
					"/providers"
				],
				"summary": "Get Provider",
				"description": "Gets a provider version by name and version.",
				"operationId": "getProviderVersion",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "path",
						"description": "The name of the provider",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "The name of the provider."
						}
					},
					{
						"name": "version",
						"in": "path",
						"description": "The version of the provider",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "The version of the provider."
						}
					}
				],
				"responses": {
					"200": {
						"description": "Provider version successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderViewData"
								}
							}
						}
					},
					"400": {
						"description": "A payload constraint violation occurred.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"404": {
						"description": "Provider version for the name and version does not exist",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResourceDoesNotExistException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_PROVIDER_GET"
					]
				}
			},
			"put": {
				"tags": [
					"/providers"
				],
				"summary": "Update Provider",
				"description": "Updates a raw transaction provider version for the provided provider name and version. The provided functions should exist for the provider to be updated.",
				"operationId": "updateProviderVersion",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "path",
						"description": "The name of the provider",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "The name of the provider."
						}
					},
					{
						"name": "version",
						"in": "path",
						"description": "The version of the provider",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "The version of the provider."
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProviderData"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Provider successfully updated.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderViewData"
								}
							}
						}
					},
					"400": {
						"description": "A payload constraint violation occurred.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"404": {
						"description": "Provider version for the name and version does not exist",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResourceDoesNotExistException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_PROVIDER_UPDATE"
					]
				}
			},
			"delete": {
				"tags": [
					"/providers"
				],
				"summary": "Delete Provider",
				"description": "Deletes a provider version by name and version.",
				"operationId": "deleteProviderVersion",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "path",
						"description": "The name of the provider",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "The name of the provider."
						}
					},
					{
						"name": "version",
						"in": "path",
						"description": "The version of the provider",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "The version of the provider."
						}
					}
				],
				"responses": {
					"204": {
						"description": "Provider version successfully deleted."
					},
					"400": {
						"description": "A payload constraint violation occurred.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"404": {
						"description": "Provider version for the name and version does not exist",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResourceDoesNotExistException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_PROVIDER_DELETE"
					]
				}
			}
		},
		"/subscriptions": {
			"get": {
				"tags": [
					"/subscriptions"
				],
				"summary": "Get subscriptions",
				"description": "Retrieves the paginated subscriptions",
				"operationId": "getSubscriptions",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageNumber",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "pageSize",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 200
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FindTdmSubscriptionResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized: The request requires user authentication",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidCredentialsException"
								}
							}
						}
					},
					"403": {
						"description": "Access denied due to insufficient privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_SUBSCRIPTION_GET_ALL"
					]
				}
			},
			"post": {
				"tags": [
					"/subscriptions"
				],
				"summary": "Create subscription",
				"description": "Create subscription to specific TDM service topics",
				"operationId": "createSubscription",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTdmSubscriptionRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TdmSubscriptionViewData"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized: The request requires user authentication",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidCredentialsException"
								}
							}
						}
					},
					"403": {
						"description": "Access denied due to insufficient privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_SUBSCRIPTION_CREATE"
					]
				}
			}
		},
		"/subscriptions/{name}": {
			"get": {
				"tags": [
					"/subscriptions"
				],
				"summary": "Get subscription",
				"description": "Retrieves the specified subscription",
				"operationId": "getSubscription",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "path",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TdmSubscriptionViewData"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized: The request requires user authentication",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidCredentialsException"
								}
							}
						}
					},
					"403": {
						"description": "Access denied due to insufficient privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"404": {
						"description": "Resource not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResourceDoesNotExistException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_SUBSCRIPTION_GET"
					]
				}
			},
			"delete": {
				"tags": [
					"/subscriptions"
				],
				"summary": "Delete subscription",
				"description": "Deletes the specified subscription",
				"operationId": "deleteSubscription",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "path",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Success"
					},
					"400": {
						"description": "Bad Request: The request is invalid",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BusinessException"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized: The request requires user authentication",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidCredentialsException"
								}
							}
						}
					},
					"403": {
						"description": "Access denied due to insufficient privileges",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessDeniedException"
								}
							}
						}
					},
					"404": {
						"description": "Resource not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResourceDoesNotExistException"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_SUBSCRIPTION_DELETE"
					]
				}
			}
		},
		"/transaction-documents": {
			"get": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Get Multiple Canonicals",
				"description": "Finds and returns a batch of TLogs at once based on the ids.",
				"operationId": "getCanonicalTlogsByIds",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response, this endpoint only returns application/json as response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "id",
						"in": "query",
						"description": "the id of the tLog.",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"maxItems": 100,
							"minItems": 1,
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetMultipleCanonicalTLogsResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "Not found:  The document was not found."
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			},
			"put": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Update Canonical",
				"description": "Updates one or more TDM Documents in canonical format. Requires a tlog version to be provided; the most recent tlog needs to have the greatest version. Older versions can be accessed using Get Versioned Canonical API.",
				"operationId": "updateCanonicalTransaction",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response, this endpoint only returns application/json as response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"description": "The media type of the entity-body, this endpoint only allows application/json as body",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateCanonicalTLogDataRequest"
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Success: Received the document"
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_UPLOAD"
					]
				}
			},
			"post": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Save Canonical",
				"description": "Saves one or more Canonical TDM Documents. Accepts one or multiple Canonical TDM json bodies and saves them in TDM. Transaction will be saved in provided organization (nep-organization header) or user's organization if header is not provided",
				"operationId": "saveCanonical",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Content-Type",
						"in": "header",
						"description": "The media type of the entity-body, this endpoint only allows application/json as body",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "tdm-migration",
						"in": "header",
						"description": "If this is set to true, this save request is part of a migration and publishing will not occur.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SaveCanonicalTLogDataRequest"
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Success: Received the document"
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_UPLOAD"
					]
				}
			}
		},
		"/transaction-documents/find": {
			"post": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Find Transactions",
				"description": "Finds TDM documents matching the specified criteria. Returned list contains a tlog metadata instead of the whole tlog.",
				"operationId": "findByQueryCriteria",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response, this endpoint only returns application/json as response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"description": "The media type of the entity-body, this endpoint only allows application/json as body",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					}
				],
				"requestBody": {
					"description": "The class containing the fields to search by.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FindTLogRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "response object containing a page of search results",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FindTLogResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "No documents found"
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			}
		},
		"/transaction-documents/find/count": {
			"post": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Count Transactions",
				"description": "Finds TDM documents matching the specified criteria and returns the count.",
				"operationId": "getCountByCriteria",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response, this endpoint only returns application/json as response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"description": "The media type of the entity-body, this endpoint only allows application/json as body",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					}
				],
				"requestBody": {
					"description": "request the search criteria",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FindTLogRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response object containing the document count.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TLogCountResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "No documents found"
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			}
		},
		"/transaction-documents/raw": {
			"put": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Update Raw",
				"description": "Updates one or more TDM documents using json with base64 encoded tlogs of any format. The providerName and providerVersion parameters must be specified and will be used to determine which type of formatter/parser to use. Requires a tlog version to be provided; the most recent tlog needs to have the greatest version. Older versions can be accessed using Get Versioned Raw API.",
				"operationId": "updateRawTransaction",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response, this endpoint only returns application/json as response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"description": "The media type of the entity-body, this endpoint only allows application/json as body",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "providerName",
						"in": "query",
						"description": "The provider name to be used when locating a parser.<br/><b>Required when saving or updating a raw tlog.",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "providerVersion",
						"in": "query",
						"description": "The provider version to be used when locating a parser.<br/><b>Required when saving or updating a raw tlog.",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateRawTLogDataRequest"
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"500": {
						"description": "Internal Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_UPDATE"
					]
				}
			},
			"post": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Save Raw",
				"description": "Saves one or more raw/native documents using json with base64 encoded tlogs of any format. The providerName and providerVersion parameters must be specified and will be used to determine which type of formatter/parser to use.  Transaction will be saved in provided organization (nep-organization header) or user's organization if header is not provided.",
				"operationId": "saveRawTransaction",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Content-Type",
						"in": "header",
						"description": "The media type of the entity-body, this endpoint only allows application/json as body",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "providerName",
						"in": "query",
						"description": "The provider name to be used when locating a parser.<br/><b>Required when saving or updating a raw tlog.",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "providerVersion",
						"in": "query",
						"description": "The provider version to be used when locating a parser.<br/><b>Required when saving or updating a raw tlog.",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tdm-migration",
						"in": "header",
						"description": "If this is set to true, this save request is part of a migration and publishing will not occur.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SaveRawTLogDataRequest"
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"500": {
						"description": "Internal Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_UPLOAD"
					]
				}
			}
		},
		"/transaction-documents/{id}": {
			"get": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Get Canonical",
				"description": "Retrieves a Canonical TLog based on the tlog id.",
				"operationId": "getCanonicalTlogById",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response, this endpoint only returns application/json as response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "id",
						"in": "path",
						"description": "The id of the TLog.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CanonicalTLogViewData"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "Not found:  The document was not found."
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			}
		},
		"/transaction-documents/{id}/linked-documents": {
			"get": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Get Canonical Linked Transactions",
				"description": "Returns the documents (TLogs) that specified tlog links to.",
				"operationId": "getLinkedCanonicalDocuments",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response, this endpoint only returns application/json as response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "pageNumber",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "pageSize",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 200
						}
					},
					{
						"name": "id",
						"in": "path",
						"description": "The Id of the tlog to retrieve the raw documents linked to specific TLog.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "Id for the Linked TLog Request"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns the set of canonical tlogs whose id's are linked to this tlog, specified by id.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LinkedCanonicalTLogResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "Not found:  The document was not found."
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			}
		},
		"/transaction-documents/{id}/linked-documents/raw": {
			"get": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Get Raw Linked Transactions",
				"description": "Returns the raw documents (TLogs) that specified tlog links to.",
				"operationId": "getLinkedRawDocuments",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "text/plain, text/xml, text/html, application/json, etc."
					},
					{
						"name": "pageNumber",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "pageSize",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 200
						}
					},
					{
						"name": "id",
						"in": "path",
						"description": "The Id of the tlog to retrieve the raw documents linked to specific TLog.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "Id for the Linked TLog Request"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns the set of raw tlogs whose id's are linked to this tlog, specified by id.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LinkedRawTLogContentResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "Not found:  The document was not found."
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			}
		},
		"/transaction-documents/{id}/raw": {
			"get": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Get Raw",
				"description": "Retrieves a raw/native TLog based on the tlog id.",
				"operationId": "getRawTlogById",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "text/plain, text/xml, text/html, application/json, etc."
					},
					{
						"name": "id",
						"in": "path",
						"description": "The id of the TLog.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success: Response object containing the result.",
						"content": {
							"*/*": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "Not found:  The document was not found."
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			}
		},
		"/transaction-documents/{id}/receipt": {
			"get": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Get Receipt",
				"description": "Retrieves receipt image by TLog id. Returns the receipt image for a specified document (Tlog).",
				"operationId": "getReceiptInfoById",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response, this endpoint only returns application/json as response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "id",
						"in": "path",
						"description": "The id of the TLog.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "ReceiptInfo object containing (possibly encoded) receipt image",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReceiptInfo"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "Not found:  The document was not found."
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			}
		},
		"/transaction-documents/{id}/scrub": {
			"put": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Scrub Personal Data",
				"description": "Scrubs all personal data from a tlog and returns it based on the id",
				"operationId": "scrubPersonalData",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "path",
						"description": "The id of the TLog.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successfully scrubbed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CanonicalTLogViewData"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "Not found:  The document was not found."
					},
					"500": {
						"description": "Internal server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"TDM_SCRUB"
					]
				}
			}
		},
		"/transaction-documents/{id}/versions": {
			"get": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Get Tlog Versions",
				"description": "Finds and returns all versions of a TLog based on the tlog id.",
				"operationId": "getAllTLogVersionsById",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response, this endpoint only returns application/json as response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "pageNumber",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "pageSize",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 200
						}
					},
					{
						"name": "id",
						"in": "path",
						"description": "The Id of the tlog to retrieve all its available versions.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "The id of the requested TLog"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetTLogVersionsResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "Not found:  The document was not found."
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			}
		},
		"/transaction-documents/{id}/versions/{version}": {
			"get": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Get Versioned Canonical",
				"description": "Finds and returns a version of canonical TLog based on the id and a version.",
				"operationId": "getCanonicalTLogVersionById",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response, this endpoint only returns application/json as response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "id",
						"in": "path",
						"description": "The id of the TLog.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "Primary unique opaque identification of the transaction"
						}
					},
					{
						"name": "version",
						"in": "path",
						"description": "The version of the requested TLog to retrieve a single TLog.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer",
							"description": "The version of the requested TLog to retrieve",
							"format": "int64"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CanonicalTLogViewData"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized: The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "Not found: The document was not found."
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			}
		},
		"/transaction-documents/{id}/versions/{version}/raw": {
			"get": {
				"tags": [
					"/transaction-documents"
				],
				"summary": "Get Versioned Raw",
				"description": "Finds and returns a version of raw TLog based on the id and a version.",
				"operationId": "getRawTLogVersionById",
				"parameters": [
					{
						"name": "nep-organization",
						"in": "header",
						"description": "Used to access data for a specific tenant. This is also used to specify the login organization for a user in a tenant. If not provided, the user's parent organization is used.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nep-service-version",
						"in": "header",
						"description": "Identifies the application version to route the incoming request.",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "2:1"
					},
					{
						"name": "nep-application-key",
						"in": "header",
						"description": "Application key that identifies the calling application.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Accept",
						"in": "header",
						"description": "Media types which are acceptable for the response",
						"required": false,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "text/plain, text/xml, text/html, application/json, etc."
					},
					{
						"name": "id",
						"in": "path",
						"description": "The id of the TLog.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"description": "Primary unique opaque identification of the transaction"
						}
					},
					{
						"name": "version",
						"in": "path",
						"description": "The version of the requested TLog to retrieve a single TLog.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer",
							"description": "The version of the requested TLog to retrieve",
							"format": "int64"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success: Response object containing the result.",
						"content": {
							"*/*": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: The request is invalid"
					},
					"401": {
						"description": "Unauthorized:  The request requires user authentication."
					},
					"403": {
						"description": "Insufficient Privileges"
					},
					"404": {
						"description": "Not found:  The document was not found."
					},
					"500": {
						"description": "Server error"
					},
					"503": {
						"description": "Service unavailable"
					}
				},
				"x-authorities": {
					"roles": [
						"R1_TDM_VIEWER"
					]
				}
			}
		}
	},
	"components": {
		"schemas": {
			"AccessDeniedException": {
				"type": "object",
				"properties": {
					"businessMessage": {
						"type": "string"
					},
					"details": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"errorType": {
						"type": "string"
					}
				}
			},
			"AccountTypeInfo": {
				"type": "object",
				"properties": {
					"accountType": {
						"type": "string",
						"description": "Type of the account either employee, drawer, safe, paid, bank_in_out",
						"enum": [
							"EMPLOYEE",
							"DRAWER",
							"SAFE",
							"BANK",
							"PAID_IN_OUT"
						]
					},
					"bankAccountNumber": {
						"type": "string",
						"description": "Bank account number if bank is involved"
					},
					"depositBagId": {
						"type": "string",
						"description": "Identification of a deposit bag if bank deposit box is involved. Money is put in a deposit bag and thrown into a safe box."
					},
					"id": {
						"type": "string",
						"description": "Identification of the related entity. Meaning is dependent on the account type."
					}
				},
				"description": "Account Type Information associated with the Transaction."
			},
			"AccountabilityInfo": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "ID of the Account"
					},
					"name": {
						"type": "string",
						"description": "Name of the Account"
					}
				},
				"description": "Information on the POS/Terminal/Cashier accountability for this transaction."
			},
			"AddressInfo": {
				"type": "object",
				"properties": {
					"countryCode": {
						"type": "string",
						"description": "Country identification as in ISO 3166-1 alpha 2."
					},
					"formattedAddress": {
						"type": "string",
						"description": "Full address usable to post a letter."
					}
				},
				"description": "Address Information associated with the Transaction."
			},
			"AdvancePassengerInfo": {
				"required": [
					"countryOfResidence",
					"passports"
				],
				"type": "object",
				"properties": {
					"countryOfResidence": {
						"$ref": "#/components/schemas/CountryOfResidenceInfo"
					},
					"emergencyContact": {
						"$ref": "#/components/schemas/EmergencyContactInfo"
					},
					"knownTravelerNumber": {
						"$ref": "#/components/schemas/KnownTravelerNumberInfo"
					},
					"passports": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The passports.",
						"items": {
							"$ref": "#/components/schemas/PassportInfo"
						}
					},
					"redressNumber": {
						"$ref": "#/components/schemas/RedressNumberInfo"
					},
					"residentCard": {
						"$ref": "#/components/schemas/ResidentCardInfo"
					},
					"usDestinationAddress": {
						"$ref": "#/components/schemas/UsDestinationAddressInfo"
					},
					"visas": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/VisaInfo"
						}
					}
				},
				"description": "The AdvancePassengerInfo class contains the details of all the optional and mandatory international documents of a passenger traveling in any international flight segment."
			},
			"AirlineInfo": {
				"required": [
					"code",
					"name",
					"subsidiaryCode"
				],
				"type": "object",
				"properties": {
					"code": {
						"pattern": "[a-zA-Z0-9]{2}",
						"type": "string",
						"description": "The airline code."
					},
					"name": {
						"pattern": "[a-zA-Z\\s]{2,500}",
						"type": "string",
						"description": "The airline name."
					},
					"subsidiaryCode": {
						"type": "string",
						"description": "The airline subsidiary code."
					}
				},
				"description": "The Class AirlineInfo"
			},
			"ApexTransaction": {
				"required": [
					"reservation"
				],
				"type": "object",
				"properties": {
					"mktSysData": {
						"$ref": "#/components/schemas/MktSysDataInfo"
					},
					"reservation": {
						"$ref": "#/components/schemas/ReservationInfo"
					}
				},
				"description": "Apex Transaction for Travel use cases"
			},
			"AuthenticationData": {
				"required": [
					"authenticationType",
					"credentials"
				],
				"type": "object",
				"properties": {
					"authenticationType": {
						"type": "string",
						"enum": [
							"BASIC"
						]
					},
					"credentials": {
						"maxLength": 500,
						"minLength": 1,
						"type": "string"
					}
				},
				"description": "Authentication credentials needed for endpoint"
			},
			"BagInfo": {
				"required": [
					"bagId",
					"bagTagIssued",
					"weight"
				],
				"type": "object",
				"properties": {
					"bagId": {
						"pattern": "[a-zA-Z0-9]{1,10}",
						"type": "string",
						"description": "The bag id"
					},
					"bagTagIssued": {
						"type": "boolean",
						"description": "The bag tag issued."
					},
					"weight": {
						"$ref": "#/components/schemas/WeightInfo"
					}
				},
				"description": "The bag info class."
			},
			"BlendInfo": {
				"type": "object",
				"properties": {
					"blendPercent": {
						"type": "integer",
						"description": "Blend percentage associated with the transaction",
						"format": "int32"
					},
					"dispensedVolume": {
						"$ref": "#/components/schemas/QuantityInfo"
					}
				},
				"description": "Information to track blend ratios"
			},
			"BusinessException": {
				"type": "object",
				"properties": {
					"businessMessage": {
						"type": "string"
					},
					"details": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"errorType": {
						"type": "string"
					}
				}
			},
			"CanonicalTLogData": {
				"required": [
					"dataProviderName",
					"dataProviderVersion",
					"openDateTimeUtc",
					"siteInfo",
					"tlog",
					"touchPointId",
					"transactionCategory",
					"transactionNumber"
				],
				"type": "object",
				"properties": {
					"businessDay": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"closeDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"configurationDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"dataProviderName": {
						"type": "string",
						"description": "Name of the originating system or channel that provided the transaction. e.g. 'Aloha'"
					},
					"dataProviderVersion": {
						"type": "string",
						"description": "Version of the originating system or channel that provided the transaction. e.g. '16.2'"
					},
					"documentExpirationDate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"id": {
						"pattern": "[0-9a-zA-Z-]+",
						"type": "string",
						"description": "Primary unique opaque identification of the transaction"
					},
					"isTrainingMode": {
						"type": "boolean",
						"description": "Flag indicating training mode. Allows this document to be excluded from data processing."
					},
					"linkedTransactions": {
						"type": "array",
						"description": "List of linked (related) transactions",
						"items": {
							"$ref": "#/components/schemas/LinkedTransactionInfo"
						}
					},
					"modelVersion": {
						"type": "integer",
						"description": "Version of the model.",
						"format": "int32"
					},
					"openDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"participatingTouchPoints": {
						"type": "array",
						"description": "List of touch points participating with the transaction.",
						"items": {
							"$ref": "#/components/schemas/TouchPointInfo"
						}
					},
					"siteInfo": {
						"$ref": "#/components/schemas/SiteInfo"
					},
					"tlog": {
						"$ref": "#/components/schemas/CanonicalTransaction"
					},
					"touchPointGroup": {
						"type": "string",
						"description": "A logical grouping of touch point. A Touchpoint can be any client, e.g. a POS Terminal, Self Checkout."
					},
					"touchPointId": {
						"type": "string",
						"description": "The ID of the last terminal / touch point / POS id where the transaction occurred. Unique within the site."
					},
					"touchPointType": {
						"type": "string",
						"description": "The last front end register type in which the transaction was performed such as: POS, Mobile, e-Commerce, fuel POS etc."
					},
					"transactionAccountability": {
						"$ref": "#/components/schemas/AccountabilityInfo"
					},
					"transactionCategory": {
						"type": "string",
						"description": "The category of the transaction.\n SALE_OR_RETURN - are transaction that deals with sale or return of items.\n CONTROL - this transaction mainly deals with non-monetary related transactions like Cashier checking in to a POS.\n CASH_OFFICE - deals with movement of money from one location to another. \n APEX_TRANSACTION - transaction that captures travel information. \n TANK_FUEL_READING_TRANSACTION - transaction that captures information related to Tank readings. \n PUMP_FUEL_READING_TRANSACTION - transaction that captures information related to Pump readings. \n FUEL_DELIVERY_TRANSACTION - transaction that captures information related to Tank deliveries. \nPUMP_FUEL_TEST_TRANSACTION - transaction captures information related to Pump testing and calibrations. \nCUSTOM_TRANSACTION - A custom transaction that can represent transactions from POS that are not \nrepresented by other transaction categories. Contains data that is not part of TDM model and that is custom to each data provider.\nSTORED_VALUE_TRANSACTION - Stored Value Transaction Information associated with the Transaction.",
						"enum": [
							"SALE_OR_RETURN",
							"CONTROL",
							"CASH_OFFICE",
							"APEX_TRANSACTION",
							"TANK_FUEL_READING_TRANSACTION",
							"PUMP_FUEL_READING_TRANSACTION",
							"FUEL_DELIVERY_TRANSACTION",
							"PUMP_FUEL_TEST_TRANSACTION",
							"CUSTOM_TRANSACTION",
							"STORED_VALUE_TRANSACTION"
						]
					},
					"transactionNumber": {
						"type": "string",
						"description": "Transaction number based on POS (fully up to POS whether this is unique within a site or business day or terminal or all)."
					},
					"transactionReason": {
						"type": "string",
						"description": "Specified reason for a transaction"
					}
				},
				"description": "The generic type of canonical tlog object."
			},
			"CanonicalTLogUpdateData": {
				"required": [
					"dataProviderName",
					"dataProviderVersion",
					"openDateTimeUtc",
					"siteInfo",
					"tlog",
					"touchPointId",
					"transactionCategory",
					"transactionNumber",
					"transactionVersion"
				],
				"type": "object",
				"properties": {
					"businessDay": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"closeDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"configurationDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"dataProviderName": {
						"type": "string",
						"description": "Name of the originating system or channel that provided the transaction. e.g. 'Aloha'"
					},
					"dataProviderVersion": {
						"type": "string",
						"description": "Version of the originating system or channel that provided the transaction. e.g. '16.2'"
					},
					"documentExpirationDate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"id": {
						"pattern": "[0-9a-zA-Z-]+",
						"type": "string",
						"description": "Primary unique opaque identification of the transaction"
					},
					"isTrainingMode": {
						"type": "boolean",
						"description": "Flag indicating training mode. Allows this document to be excluded from data processing."
					},
					"isUpdated": {
						"type": "boolean",
						"description": "Indicates if this transaction is an update. This defaults to `true`."
					},
					"linkedTransactions": {
						"type": "array",
						"description": "List of linked (related) transactions",
						"items": {
							"$ref": "#/components/schemas/LinkedTransactionInfo"
						}
					},
					"modelVersion": {
						"type": "integer",
						"description": "Version of the model.",
						"format": "int32"
					},
					"openDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"participatingTouchPoints": {
						"type": "array",
						"description": "List of touch points participating with the transaction.",
						"items": {
							"$ref": "#/components/schemas/TouchPointInfo"
						}
					},
					"siteInfo": {
						"$ref": "#/components/schemas/SiteInfo"
					},
					"tlog": {
						"$ref": "#/components/schemas/CanonicalTransaction"
					},
					"touchPointGroup": {
						"type": "string",
						"description": "A logical grouping of touch point. A Touchpoint can be any client, e.g. a POS Terminal, Self Checkout."
					},
					"touchPointId": {
						"type": "string",
						"description": "The ID of the last terminal / touch point / POS id where the transaction occurred. Unique within the site."
					},
					"touchPointType": {
						"type": "string",
						"description": "The last front end register type in which the transaction was performed such as: POS, Mobile, e-Commerce, fuel POS etc."
					},
					"transactionAccountability": {
						"$ref": "#/components/schemas/AccountabilityInfo"
					},
					"transactionCategory": {
						"type": "string",
						"description": "The category of the transaction.\n SALE_OR_RETURN - are transaction that deals with sale or return of items.\n CONTROL - this transaction mainly deals with non-monetary related transactions like Cashier checking in to a POS.\n CASH_OFFICE - deals with movement of money from one location to another. \n APEX_TRANSACTION - transaction that captures travel information. \n TANK_FUEL_READING_TRANSACTION - transaction that captures information related to Tank readings. \n PUMP_FUEL_READING_TRANSACTION - transaction that captures information related to Pump readings. \n FUEL_DELIVERY_TRANSACTION - transaction that captures information related to Tank deliveries. \nPUMP_FUEL_TEST_TRANSACTION - transaction captures information related to Pump testing and calibrations. \nCUSTOM_TRANSACTION - A custom transaction that can represent transactions from POS that are not \nrepresented by other transaction categories. Contains data that is not part of TDM model and that is custom to each data provider.\nSTORED_VALUE_TRANSACTION - Stored Value Transaction Information associated with the Transaction.",
						"enum": [
							"SALE_OR_RETURN",
							"CONTROL",
							"CASH_OFFICE",
							"APEX_TRANSACTION",
							"TANK_FUEL_READING_TRANSACTION",
							"PUMP_FUEL_READING_TRANSACTION",
							"FUEL_DELIVERY_TRANSACTION",
							"PUMP_FUEL_TEST_TRANSACTION",
							"CUSTOM_TRANSACTION",
							"STORED_VALUE_TRANSACTION"
						]
					},
					"transactionNumber": {
						"type": "string",
						"description": "Transaction number based on POS (fully up to POS whether this is unique within a site or business day or terminal or all)."
					},
					"transactionReason": {
						"type": "string",
						"description": "Specified reason for a transaction"
					},
					"transactionVersion": {
						"minimum": 0,
						"type": "integer",
						"description": "Revision Version of the transaction.",
						"format": "int64"
					},
					"updateDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					}
				},
				"description": "List of one or more CanonicalTLogUpdateData"
			},
			"CanonicalTLogViewData": {
				"required": [
					"dataProviderName",
					"dataProviderVersion",
					"openDateTimeUtc",
					"siteInfo",
					"tlog",
					"touchPointId",
					"transactionCategory",
					"transactionNumber"
				],
				"type": "object",
				"properties": {
					"businessDay": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"closeDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"configurationDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"dataProviderName": {
						"type": "string",
						"description": "Name of the originating system or channel that provided the transaction. e.g. 'Aloha'"
					},
					"dataProviderVersion": {
						"type": "string",
						"description": "Version of the originating system or channel that provided the transaction. e.g. '16.2'"
					},
					"documentExpirationDate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"id": {
						"pattern": "[0-9a-zA-Z-]+",
						"type": "string",
						"description": "Primary unique opaque identification of the transaction"
					},
					"isTrainingMode": {
						"type": "boolean",
						"description": "Flag indicating training mode. Allows this document to be excluded from data processing."
					},
					"isUpdated": {
						"type": "boolean",
						"description": "This flag indicates that this transaction is an updated transaction."
					},
					"linkedTransactions": {
						"type": "array",
						"description": "List of linked (related) transactions",
						"items": {
							"$ref": "#/components/schemas/LinkedTransactionInfo"
						}
					},
					"modelVersion": {
						"type": "integer",
						"description": "Version of the model.",
						"format": "int32"
					},
					"openDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"participatingTouchPoints": {
						"type": "array",
						"description": "List of touch points participating with the transaction.",
						"items": {
							"$ref": "#/components/schemas/TouchPointInfo"
						}
					},
					"scrubbedDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"siteInfo": {
						"$ref": "#/components/schemas/SiteInfo"
					},
					"tlog": {
						"$ref": "#/components/schemas/CanonicalTransaction"
					},
					"touchPointGroup": {
						"type": "string",
						"description": "A logical grouping of touch point. A Touchpoint can be any client, e.g. a POS Terminal, Self Checkout."
					},
					"touchPointId": {
						"type": "string",
						"description": "The ID of the last terminal / touch point / POS id where the transaction occurred. Unique within the site."
					},
					"touchPointType": {
						"type": "string",
						"description": "The last front end register type in which the transaction was performed such as: POS, Mobile, e-Commerce, fuel POS etc."
					},
					"transactionAccountability": {
						"$ref": "#/components/schemas/AccountabilityInfo"
					},
					"transactionCategory": {
						"type": "string",
						"description": "The category of the transaction.\n SALE_OR_RETURN - are transaction that deals with sale or return of items.\n CONTROL - this transaction mainly deals with non-monetary related transactions like Cashier checking in to a POS.\n CASH_OFFICE - deals with movement of money from one location to another. \n APEX_TRANSACTION - transaction that captures travel information. \n TANK_FUEL_READING_TRANSACTION - transaction that captures information related to Tank readings. \n PUMP_FUEL_READING_TRANSACTION - transaction that captures information related to Pump readings. \n FUEL_DELIVERY_TRANSACTION - transaction that captures information related to Tank deliveries. \nPUMP_FUEL_TEST_TRANSACTION - transaction captures information related to Pump testing and calibrations. \nCUSTOM_TRANSACTION - A custom transaction that can represent transactions from POS that are not \nrepresented by other transaction categories. Contains data that is not part of TDM model and that is custom to each data provider.\nSTORED_VALUE_TRANSACTION - Stored Value Transaction Information associated with the Transaction.",
						"enum": [
							"SALE_OR_RETURN",
							"CONTROL",
							"CASH_OFFICE",
							"APEX_TRANSACTION",
							"TANK_FUEL_READING_TRANSACTION",
							"PUMP_FUEL_READING_TRANSACTION",
							"FUEL_DELIVERY_TRANSACTION",
							"PUMP_FUEL_TEST_TRANSACTION",
							"CUSTOM_TRANSACTION",
							"STORED_VALUE_TRANSACTION"
						]
					},
					"transactionNumber": {
						"type": "string",
						"description": "Transaction number based on POS (fully up to POS whether this is unique within a site or business day or terminal or all)."
					},
					"transactionReason": {
						"type": "string",
						"description": "Specified reason for a transaction"
					},
					"transactionVersion": {
						"type": "integer",
						"description": "Revision Version of the transaction. Used in cases the transaction is updated.",
						"format": "int64"
					},
					"updateDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					}
				},
				"description": "The generic type of canonical tlog view object."
			},
			"CanonicalTLogViewDataCanonicalTransaction": {
				"required": [
					"dataProviderName",
					"dataProviderVersion",
					"openDateTimeUtc",
					"siteInfo",
					"tlog",
					"touchPointId",
					"transactionCategory",
					"transactionNumber"
				],
				"type": "object",
				"properties": {
					"businessDay": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"closeDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"configurationDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"dataProviderName": {
						"type": "string",
						"description": "Name of the originating system or channel that provided the transaction. e.g. 'Aloha'"
					},
					"dataProviderVersion": {
						"type": "string",
						"description": "Version of the originating system or channel that provided the transaction. e.g. '16.2'"
					},
					"documentExpirationDate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"id": {
						"pattern": "[0-9a-zA-Z-]+",
						"type": "string",
						"description": "Primary unique opaque identification of the transaction"
					},
					"isTrainingMode": {
						"type": "boolean",
						"description": "Flag indicating training mode. Allows this document to be excluded from data processing."
					},
					"isUpdated": {
						"type": "boolean",
						"description": "This flag indicates that this transaction is an updated transaction."
					},
					"linkedTransactions": {
						"type": "array",
						"description": "List of linked (related) transactions",
						"items": {
							"$ref": "#/components/schemas/LinkedTransactionInfo"
						}
					},
					"modelVersion": {
						"type": "integer",
						"description": "Version of the model.",
						"format": "int32"
					},
					"openDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"participatingTouchPoints": {
						"type": "array",
						"description": "List of touch points participating with the transaction.",
						"items": {
							"$ref": "#/components/schemas/TouchPointInfo"
						}
					},
					"scrubbedDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"siteInfo": {
						"$ref": "#/components/schemas/SiteInfo"
					},
					"tlog": {
						"$ref": "#/components/schemas/CanonicalTransaction"
					},
					"touchPointGroup": {
						"type": "string",
						"description": "A logical grouping of touch point. A Touchpoint can be any client, e.g. a POS Terminal, Self Checkout."
					},
					"touchPointId": {
						"type": "string",
						"description": "The ID of the last terminal / touch point / POS id where the transaction occurred. Unique within the site."
					},
					"touchPointType": {
						"type": "string",
						"description": "The last front end register type in which the transaction was performed such as: POS, Mobile, e-Commerce, fuel POS etc."
					},
					"transactionAccountability": {
						"$ref": "#/components/schemas/AccountabilityInfo"
					},
					"transactionCategory": {
						"type": "string",
						"description": "The category of the transaction.\n SALE_OR_RETURN - are transaction that deals with sale or return of items.\n CONTROL - this transaction mainly deals with non-monetary related transactions like Cashier checking in to a POS.\n CASH_OFFICE - deals with movement of money from one location to another. \n APEX_TRANSACTION - transaction that captures travel information. \n TANK_FUEL_READING_TRANSACTION - transaction that captures information related to Tank readings. \n PUMP_FUEL_READING_TRANSACTION - transaction that captures information related to Pump readings. \n FUEL_DELIVERY_TRANSACTION - transaction that captures information related to Tank deliveries. \nPUMP_FUEL_TEST_TRANSACTION - transaction captures information related to Pump testing and calibrations. \nCUSTOM_TRANSACTION - A custom transaction that can represent transactions from POS that are not \nrepresented by other transaction categories. Contains data that is not part of TDM model and that is custom to each data provider.\nSTORED_VALUE_TRANSACTION - Stored Value Transaction Information associated with the Transaction.",
						"enum": [
							"SALE_OR_RETURN",
							"CONTROL",
							"CASH_OFFICE",
							"APEX_TRANSACTION",
							"TANK_FUEL_READING_TRANSACTION",
							"PUMP_FUEL_READING_TRANSACTION",
							"FUEL_DELIVERY_TRANSACTION",
							"PUMP_FUEL_TEST_TRANSACTION",
							"CUSTOM_TRANSACTION",
							"STORED_VALUE_TRANSACTION"
						]
					},
					"transactionNumber": {
						"type": "string",
						"description": "Transaction number based on POS (fully up to POS whether this is unique within a site or business day or terminal or all)."
					},
					"transactionReason": {
						"type": "string",
						"description": "Specified reason for a transaction"
					},
					"transactionVersion": {
						"type": "integer",
						"description": "Revision Version of the transaction. Used in cases the transaction is updated.",
						"format": "int64"
					},
					"updateDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					}
				},
				"description": "The generic type of canonical tlog view object."
			},
			"CanonicalTransaction": {
				"type": "object",
				"description": "The document described by the TLogType tlogType field.",
				"oneOf": [
					{
						"$ref": "#/components/schemas/Transaction"
					},
					{
						"$ref": "#/components/schemas/CashManagement"
					},
					{
						"$ref": "#/components/schemas/ControlTransaction"
					},
					{
						"$ref": "#/components/schemas/ApexTransaction"
					},
					{
						"$ref": "#/components/schemas/TankFuelReadingTransaction"
					},
					{
						"$ref": "#/components/schemas/PumpFuelReadingTransaction"
					},
					{
						"$ref": "#/components/schemas/FuelDeliveryTransaction"
					},
					{
						"$ref": "#/components/schemas/PumpFuelTestTransaction"
					},
					{
						"$ref": "#/components/schemas/CustomTransaction"
					},
					{
						"$ref": "#/components/schemas/StoredValueTransaction"
					}
				]
			},
			"CashManagement": {
				"type": "object",
				"properties": {
					"coupons": {
						"type": "array",
						"description": "Coupon Information",
						"items": {
							"$ref": "#/components/schemas/CmCouponInfo"
						}
					},
					"destinationAccount": {
						"$ref": "#/components/schemas/AccountTypeInfo"
					},
					"employee": {
						"$ref": "#/components/schemas/EmployeeInfo"
					},
					"isAutomated": {
						"type": "boolean",
						"description": "True, if the transaction is automatic and not manual."
					},
					"referenceId": {
						"type": "string",
						"description": "Non-unique reference id of a transaction used to track cash office transactions."
					},
					"sourceAccount": {
						"$ref": "#/components/schemas/AccountTypeInfo"
					},
					"tenders": {
						"type": "array",
						"description": "Tender Information",
						"items": {
							"$ref": "#/components/schemas/CmTenderInfo"
						}
					},
					"totalTaxes": {
						"type": "array",
						"description": "Tax Information",
						"items": {
							"$ref": "#/components/schemas/CmTaxInfo"
						}
					},
					"totals": {
						"$ref": "#/components/schemas/CmTotalsInfo"
					},
					"transactionType": {
						"type": "string",
						"description": "Type of the transaction this message describes",
						"enum": [
							"DRAWER_ASSIGNMENT",
							"DRAWER_RETURN",
							"CONFIRMATION",
							"COUNT",
							"OPEN_LOAN",
							"ADD_LOAN",
							"SAFE_DROP",
							"PAY_IN",
							"PAY_OUT",
							"BANK_DEPOSIT",
							"BANK_RECEIPT",
							"TRANSFER",
							"UNKNOWN",
							"BLIND_PICKUP"
						]
					}
				},
				"description": "Cash Management Information associated with the Canonical Transaction."
			},
			"ChargebackInfo": {
				"type": "object",
				"properties": {
					"chargebackAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"chargebackId": {
						"type": "string",
						"description": "Id of the entity that will contribute to the chargeback."
					},
					"type": {
						"type": "string",
						"description": "Type of the entity that will contribute to the chargeback",
						"enum": [
							"UNKNOWN",
							"DEPARTMENT"
						]
					},
					"typeLabel": {
						"type": "string",
						"description": "Label field for chargeback types that are unknown"
					}
				},
				"description": "List of entities like departments, suppliers, or retailers and the amounts of the discount those entities are responsible for."
			},
			"CheckInfo": {
				"type": "object",
				"properties": {
					"checkNumber": {
						"type": "string",
						"description": "Number of the check"
					},
					"checkType": {
						"type": "string",
						"description": "Type of check (ex. cashiers, travelers, etc.)"
					}
				},
				"description": "Check Number information associated with transaction."
			},
			"CmCouponInfo": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"description": "Number of coupons",
						"format": "int32"
					},
					"description": {
						"type": "string",
						"description": "Description / name"
					},
					"id": {
						"type": "string",
						"description": "External id of the coupon / voucher"
					},
					"type": {
						"type": "string",
						"description": "The type of the coupon",
						"enum": [
							"UNKNOWN_TYPE",
							"OTHER_COUPON",
							"SITE_COUPON",
							"MANUFACTURER_COUPON"
						]
					}
				},
				"description": "Coupon Information"
			},
			"CmTaxInfo": {
				"type": "object",
				"properties": {
					"amount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"taxTypeCode": {
						"type": "string",
						"description": "Type of the tax e.g. sales, VAT etc.",
						"enum": [
							"SALES",
							"VAT",
							"GST",
							"PST",
							"HST",
							"EXCISE",
							"USE_TAX",
							"UNKNOWN"
						]
					}
				},
				"description": "Tax Information for Cash Management"
			},
			"CmTenderAdjustmentInfo": {
				"type": "object",
				"properties": {
					"adjustmentReason": {
						"type": "string",
						"description": "Reason for the tender adjustment."
					},
					"currency": {
						"$ref": "#/components/schemas/CurrencyInfo"
					},
					"id": {
						"type": "string",
						"description": "The ID of the tender used to pay for the transaction. External id of the tender."
					},
					"originalAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"tenderAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					}
				},
				"description": "Tender Adjustment Information associated with a Tender."
			},
			"CmTenderInfo": {
				"type": "object",
				"properties": {
					"actualAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"currency": {
						"$ref": "#/components/schemas/CurrencyInfo"
					},
					"exchangeRate": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"id": {
						"type": "string",
						"description": "The ID of the tender used to pay for the transaction. External id of the tender."
					},
					"isVoided": {
						"type": "boolean",
						"description": "True if the tender was voided"
					},
					"name": {
						"type": "string",
						"description": "The name of the tender used to pay for the transaction."
					},
					"originalAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"tenderAdjustments": {
						"type": "array",
						"description": "Tender Adjustment Information associated with a Tender",
						"items": {
							"$ref": "#/components/schemas/CmTenderAdjustmentInfo"
						}
					},
					"tenderAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"tenderAuthorization": {
						"$ref": "#/components/schemas/TenderAuthorizationInfo"
					},
					"tenderBreakDown": {
						"type": "array",
						"description": "Break down to particular tender groups",
						"items": {
							"$ref": "#/components/schemas/TenderBucketInfo"
						}
					},
					"tenderCount": {
						"type": "integer",
						"description": "Number of the specified tender.",
						"format": "int32"
					},
					"type": {
						"type": "string",
						"description": "The type of the tender. e.g. cash, credit card, gift card etc.",
						"enum": [
							"GENERIC",
							"CASH",
							"CREDIT_CARD",
							"DEBIT_CARD",
							"CASH_CARD",
							"GIFT_CARD",
							"GIFT_CERTIFICATE",
							"HOUSE_ACCOUNT",
							"PROPERTY_MANAGEMENT",
							"ACCOUNTS_RECEIVABLE",
							"ROOM_CHARGE",
							"SAVED_CUSTOMER",
							"CAMPUS_CARD",
							"MEAL_VOUCHER",
							"CHECK",
							"ELECTRONIC_BENEFIT_TRANSFER_CASH",
							"ELECTRONIC_BENEFIT_TRANSFER_FOOD_STAMP",
							"DRIVE_OR_WALK_OFF",
							"MANUFACTURER_COUPON",
							"MONEY_ORDER",
							"FLEXIBLE_SPENDING_ACCOUNT",
							"LOCAL_ACCOUNT",
							"WIC_ELECTRONIC",
							"WIC_SMARTCARD",
							"TRAVELERS_CHECK",
							"LOYALTY_POINTS",
							"STORED_VALUE",
							"DONATION",
							"SMART_WIC",
							"MOBILE",
							"VOUCHER"
						]
					},
					"usage": {
						"type": "string",
						"description": "The purpose for which the tender was used in the context of the original transaction",
						"enum": [
							"PAYMENT",
							"REFUND",
							"CHANGE",
							"CASHBACK",
							"PRE_AUTHORIZATION",
							"CASH_OFFICE_AMOUNT",
							"CASH_OFFICE_OVER",
							"CASH_OFFICE_SHORT"
						]
					}
				},
				"description": "Tender Information associated with the transaction."
			},
			"CmTotalsInfo": {
				"type": "object",
				"properties": {
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"taxExclusive": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"taxInclusive": {
						"$ref": "#/components/schemas/MoneyInfo"
					}
				},
				"description": "Totals for Cash Management transaction"
			},
			"ControlTransaction": {
				"type": "object",
				"properties": {
					"approver": {
						"$ref": "#/components/schemas/EmployeeInfo"
					},
					"endOfDaySummary": {
						"$ref": "#/components/schemas/EndOfDaySummary"
					},
					"isForcedEvent": {
						"type": "boolean",
						"description": "True, if the transaction is forced"
					},
					"operator": {
						"$ref": "#/components/schemas/EmployeeInfo"
					},
					"priceChanges": {
						"$ref": "#/components/schemas/PriceChanges"
					},
					"reasonCode": {
						"type": "string",
						"description": "Reason for the transaction."
					},
					"targetId": {
						"type": "string",
						"description": "Identification of the transaction object/subject. Meaning depends on the transaction type."
					},
					"terminalLockMethod": {
						"type": "string",
						"description": "Method of locking the terminal",
						"enum": [
							"UNKNOWN",
							"AUTOMATIC",
							"MANUAL"
						]
					},
					"terminalLockMethodLabel": {
						"type": "string",
						"description": "This label field is used to define the terminal lock method if it's UNKNOWN or it's used to further elaborate on selected type."
					},
					"terminalState": {
						"type": "string",
						"description": "State of terminal at the time of locking",
						"enum": [
							"UNKNOWN",
							"SALE_MODE",
							"NO_SALE_MODE",
							"TENDER_MODE"
						]
					},
					"terminalStateLabel": {
						"type": "string",
						"description": "This label field is used to define the terminal state if it's UNKNOWN or it's used to further elaborate on selected type."
					},
					"transactionType": {
						"type": "string",
						"description": "Type of the transaction",
						"enum": [
							"SIGN_ON",
							"SIGN_OFF",
							"INVALID_PASSWORD",
							"CHANGE_PASSWORD",
							"RESET_PASSWORD",
							"TERMINAL_LOCK",
							"TERMINAL_UNLOCK",
							"DRAWER_OPEN",
							"END_OF_DAY",
							"TERMINAL_UP",
							"TERMINAL_DOWN",
							"SECURITY_ID_ENABLED",
							"SECURITY_ID_DISABLED",
							"START_OF_DAY",
							"PRICE_CHANGE",
							"UNKNOWN",
							"BLIND_PICKUP_REQUEST"
						]
					},
					"transactionTypeLabel": {
						"type": "string",
						"description": "the label is used to define the transaction type if it's UNKNOWN or it's used to further elaborate on selected type"
					}
				},
				"description": "Control Transaction Information associated with the Transaction."
			},
			"CountryOfResidenceInfo": {
				"required": [
					"countryCode",
					"idocType"
				],
				"type": "object",
				"properties": {
					"countryCode": {
						"pattern": "[A-Z]{3}",
						"type": "string",
						"description": "The country code."
					},
					"idocType": {
						"type": "string",
						"description": "The idoc type.",
						"enum": [
							"UNKNOWN_DOCUMENT",
							"COUNTRY_OF_RESIDENCE",
							"PASSPORT",
							"RESIDENT_CARD",
							"REDRESS_NUMBER",
							"US_DESTINATION_ADDRESS",
							"EMERGENCY_CONTACT_INFORMATION",
							"VISA",
							"I94_FORM",
							"MILITARY_ID",
							"NATIONAL_IDENTITY_CARD",
							"ALIEN_REGISTRATION_NUMBER",
							"BORDER_CROSSING_CARD",
							"REFUGEE_TRAVEL_DOCUMENT",
							"PILOT_LICENSE",
							"KNOWN_TRAVELER_NUMBER",
							"NATURALIZATION_CERTIFICATE",
							"OTHER"
						]
					}
				},
				"description": "The Class CountyOfResidenceInfo"
			},
			"CouponInfo": {
				"type": "object",
				"properties": {
					"amount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"description": {
						"type": "string",
						"description": "Description/Name"
					},
					"entryMethod": {
						"type": "string",
						"description": "How the data was entered.",
						"enum": [
							"KEYED",
							"INTEGRATED_CHIP_CARD",
							"MEASURED",
							"MICR",
							"MSR",
							"RFID",
							"SELF_SCAN",
							"SCANNED",
							"SMART_CARD",
							"TAPPED",
							"WAVED",
							"WEIGHED",
							"UNKNOWN",
							"AUTOMATIC"
						]
					},
					"entryMethodLabel": {
						"type": "string",
						"description": "Used for values which are not in entryMethod have to be handled by this label."
					},
					"id": {
						"type": "string",
						"description": "External id of the coupon / voucher."
					},
					"isVoided": {
						"type": "boolean",
						"description": "True if coupon is voided."
					},
					"issueMethod": {
						"type": "string",
						"description": "The issue method of coupon as free text.",
						"enum": [
							"UNKNOWN_ISSUE_METHOD",
							"OTHER_METHOD",
							"PAPER_COUPON",
							"PRINTED_ON_POS",
							"DIGITAL_COUPON"
						]
					},
					"issueMethodLabel": {
						"type": "string",
						"description": "The issue method Label of coupon as free text."
					},
					"operatorBypassApprovals": {
						"type": "array",
						"description": "List of information regarding operator bypass approvals for given tender.",
						"items": {
							"$ref": "#/components/schemas/OperatorBypassApprovalInfo"
						}
					},
					"participatingItems": {
						"type": "array",
						"description": "List of the participatingItems (item Id's) that caused the coupon to be awarded/redeemed.",
						"items": {
							"type": "string",
							"description": "List of the participatingItems (item Id's) that caused the coupon to be awarded/redeemed."
						}
					},
					"quantity": {
						"type": "integer",
						"description": "Quantity of the coupon",
						"format": "int32"
					},
					"type": {
						"type": "string",
						"description": "The type of the coupon",
						"enum": [
							"UNKNOWN_TYPE",
							"OTHER_COUPON",
							"SITE_COUPON",
							"MANUFACTURER_COUPON"
						]
					},
					"typeLabel": {
						"type": "string",
						"description": "The type of the coupon as free text."
					},
					"voidInfo": {
						"$ref": "#/components/schemas/VoidInfo"
					}
				},
				"description": "Coupon Information associated with the Transaction."
			},
			"CreateProviderRequest": {
				"required": [
					"gcpCloudFunctionsMetadata",
					"getParserPropertiesFunctionName",
					"getReceiptFunctionName",
					"parseFunctionName",
					"providerName",
					"providerVersion"
				],
				"type": "object",
				"properties": {
					"gcpCloudFunctionsMetadata": {
						"$ref": "#/components/schemas/GcpCloudFunctionsMetadata"
					},
					"getParserPropertiesFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the `getParserProperties` function for this provider."
					},
					"getReceiptFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the `getReceipt` function for this provider."
					},
					"parseFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the `parse` function for this provider."
					},
					"providerName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the provider."
					},
					"providerVersion": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The version of the provider"
					},
					"scrubFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the 'scrub' function for this provider"
					}
				},
				"description": "Create request for a provider"
			},
			"CreateTdmSubscriptionRequest": {
				"required": [
					"description",
					"endpoint",
					"name",
					"topicId"
				],
				"type": "object",
				"properties": {
					"authenticationCredentials": {
						"$ref": "#/components/schemas/AuthenticationData"
					},
					"description": {
						"type": "string",
						"description": "Description of the subscription"
					},
					"endpoint": {
						"$ref": "#/components/schemas/UrlEndpointData"
					},
					"messageAttributePatterns": {
						"type": "array",
						"description": "The message attribute patterns to use when selecting messages published on a topic. If patterns are specified, the subscription will receive only those messages that are published with attributes that match the subscription's patterns. Each attribute pattern specified must be matched against the message's attribute values for the message to be delivered to the subscriber. Each message attribute pattern value must be a valid regular expression pattern",
						"items": {
							"$ref": "#/components/schemas/KeyValueData"
						}
					},
					"name": {
						"maxLength": 200,
						"minLength": 1,
						"pattern": "\\p{Alpha}[\\w-]*",
						"type": "string"
					},
					"payloadDelivered": {
						"type": "boolean",
						"description": "Indicates if payload should be delivered"
					},
					"topicId": {
						"$ref": "#/components/schemas/TdmTopicIdData"
					}
				},
				"description": "Request to create a URL webhook subscription to TDM data."
			},
			"CurrencyInfo": {
				"type": "object",
				"properties": {
					"code": {
						"type": "string",
						"description": "Currency Code."
					}
				},
				"description": "Currency information."
			},
			"CustomPropertyData": {
				"type": "object",
				"properties": {
					"customPropertyName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the custom property."
					}
				}
			},
			"CustomPropertyViewData": {
				"type": "object",
				"properties": {
					"createdBy": {
						"type": "string",
						"description": "The user that created the custom property."
					},
					"createdOn": {
						"type": "string",
						"description": "When the custom property was created.",
						"format": "date-time"
					},
					"customPropertyName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the custom property."
					},
					"providerName": {
						"type": "string",
						"description": "The name of the provider."
					}
				},
				"description": "The custom property view data."
			},
			"CustomTransaction": {
				"type": "object",
				"properties": {
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					}
				},
				"description": "A custom transaction that can represent transactions from POS that are not represented by other transaction categories. Contains data that is not part of TDM model and that is custom to each data provider."
			},
			"CustomerInfo": {
				"type": "object",
				"properties": {
					"birthdate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"customerType": {
						"type": "string",
						"description": "Identifies the category or type of the customer.",
						"enum": [
							"OTHER",
							"VETERAN"
						]
					},
					"customerTypeLabel": {
						"type": "string",
						"description": "This field is used in cases where CustomerType is set to UNKNOWN to provide further information about customer typeLabel."
					},
					"email": {
						"type": "string",
						"description": "Customer's email address, may be used for digital receipt purposes."
					},
					"entryMethod": {
						"type": "string",
						"description": "How the data was entered",
						"enum": [
							"KEYED",
							"INTEGRATED_CHIP_CARD",
							"MEASURED",
							"MICR",
							"MSR",
							"RFID",
							"SELF_SCAN",
							"SCANNED",
							"SMART_CARD",
							"TAPPED",
							"WAVED",
							"WEIGHED",
							"UNKNOWN",
							"AUTOMATIC"
						]
					},
					"entryMethodLabel": {
						"type": "string",
						"description": "Used for values which are not in entryMehtod have to be handled by this label"
					},
					"id": {
						"type": "string",
						"description": "The customer ID belonging to the external system."
					},
					"identifierData": {
						"type": "string",
						"description": "Data of the card or other identifiers as it has been entered or scanned"
					},
					"infoValidationMeans": {
						"type": "string",
						"description": "The means of validation of the customer info.",
						"enum": [
							"OTHER",
							"ID",
							"DRIVERS_LICENSE",
							"PASSPORT",
							"MILITARY_ID",
							"VISUAL",
							"BIOMETRICS"
						]
					},
					"infoValidationMeansLabel": {
						"type": "string",
						"description": "Used for values not in the infoValidationMeans enum. You must specify the infoValidationMeans field to use this field."
					},
					"name": {
						"type": "string",
						"description": "Customer's name"
					},
					"phoneNumber": {
						"type": "string",
						"description": "Customer's phone number"
					},
					"postalAddress": {
						"$ref": "#/components/schemas/AddressInfo"
					},
					"vehicle": {
						"$ref": "#/components/schemas/VehicleInfo"
					}
				},
				"description": "Customer Information associated with Transaction."
			},
			"CustomerProgramAccountInfo": {
				"type": "object",
				"properties": {
					"accountId": {
						"type": "string",
						"description": "Account external identifier. Unique within the customer program provider and tenant"
					},
					"accountName": {
						"type": "string",
						"description": "Human readable account identifier"
					},
					"eligibleItems": {
						"type": "array",
						"description": "List of items eligible for program benefits.",
						"items": {
							"$ref": "#/components/schemas/EligibleItemInfo"
						}
					},
					"id": {
						"type": "string",
						"description": "Internal identification of the customer program account info inside the transaction. Unique within the transaction."
					},
					"maskedCardNumber": {
						"type": "string",
						"description": "Masked number of the card. Usually first 6 and last 4 digits."
					},
					"pointsAwarded": {
						"type": "number",
						"description": "Points awarded to the customer program account. Value in Decimal format - no spaces, decimal point is '.'"
					},
					"pointsRedeemed": {
						"type": "number",
						"description": "Points redeemed from the customer program account. Value in Decimal format - no spaces, decimal point is '.'"
					},
					"programId": {
						"type": "string",
						"description": "User's customer program program id"
					},
					"programType": {
						"type": "string",
						"description": "Type of program",
						"enum": [
							"POINTS",
							"STORED_VALUE"
						]
					},
					"providerId": {
						"type": "string",
						"description": "Identification of the customer program provider. Location/site can support multiple providers. Unique within tenant"
					},
					"providerName": {
						"type": "string",
						"description": "Name of the customer program provider."
					}
				},
				"description": "Customer Program Account Information"
			},
			"DateTimeInfo": {
				"required": [
					"dateTime"
				],
				"type": "object",
				"properties": {
					"dateTime": {
						"type": "string",
						"description": "Date Time in UTC formatted as ISO 8601. e.g. 2016-10-05T14:35:32Z",
						"format": "date-time"
					},
					"originalOffset": {
						"pattern": "^[+-]\\d\\d(:?\\d\\d)?$",
						"type": "string",
						"description": "The original offset before being converted to UTC. Must be in the ISO 8601 format: ±[hh]:[mm], ±[hh][mm], or ±[hh]."
					}
				},
				"description": "Date Time Information."
			},
			"DenominationCount": {
				"type": "object",
				"properties": {
					"denominations": {
						"type": "array",
						"description": "List of denominations and their counts.",
						"items": {
							"$ref": "#/components/schemas/DenominationInfo"
						}
					}
				},
				"description": "Contains the information and counts of the denominations."
			},
			"DenominationInfo": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"description": "Total Count  of how many units there are of this denomination",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"description": "Name of this denomination"
					},
					"tenderId": {
						"type": "string",
						"description": "TenderId that identifies the tender for this denomination"
					},
					"value": {
						"$ref": "#/components/schemas/MoneyInfo"
					}
				},
				"description": "Contains the information and counts of the denominations."
			},
			"DiscountApprovalInfo": {
				"type": "object",
				"properties": {
					"approvalRequestedCount": {
						"type": "integer",
						"description": "Number of times customer needs to approve a discount",
						"format": "int32"
					},
					"approvedCount": {
						"type": "integer",
						"description": "Number of times customer approved discount request",
						"format": "int32"
					}
				},
				"description": "Contains customer approval information for the discount"
			},
			"DiscountInfo": {
				"type": "object",
				"properties": {
					"amount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"appliedDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"approvedByEmployee": {
						"$ref": "#/components/schemas/EmployeeInfo"
					},
					"categoryId": {
						"type": "string",
						"description": "Identifier for the category of the discount."
					},
					"chargebacks": {
						"type": "array",
						"description": "List of entities like departments, suppliers, or retailers and the amounts of the discount those entities are responsible for.",
						"items": {
							"$ref": "#/components/schemas/ChargebackInfo"
						}
					},
					"couponId": {
						"type": "string",
						"description": "External identification of the coupon"
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"customerProgramId": {
						"type": "string",
						"description": "Identifier of the customer program that ties this discount to the program."
					},
					"discountApprovalInfo": {
						"$ref": "#/components/schemas/DiscountApprovalInfo"
					},
					"discountReason": {
						"type": "string",
						"description": "Specified reason for applied discount."
					},
					"discountType": {
						"type": "string",
						"description": "Type of the discount",
						"enum": [
							"GENERIC",
							"COUPON",
							"COMBO",
							"COMPENSATION",
							"TENDER_BASED",
							"QUANTITY",
							"LOYALTY",
							"SPECIAL_PRICE",
							"MANUFACTURER",
							"SITE"
						]
					},
					"discountTypeLabel": {
						"type": "string",
						"description": "Used for values not in the discountType enum. You must specify the discountType field to use this field."
					},
					"id": {
						"type": "string",
						"description": "Id of the discount as understood by POS system. Unique within site."
					},
					"internalId": {
						"type": "string",
						"description": "Discount id in the context of the transaction. Allows for identifying actual instance of the discount. More than one item can have same discount internal id."
					},
					"isTaxable": {
						"type": "boolean",
						"description": "Boolean value of Taxable"
					},
					"isVoided": {
						"type": "boolean",
						"description": "True, in case the discount was voided, otherwise False."
					},
					"lineItemBreakdowns": {
						"type": "array",
						"description": "Information breaking down the discounted amounts for individual items in a bundle.",
						"items": {
							"$ref": "#/components/schemas/LineItemBreakdownInfo"
						}
					},
					"loyaltyAccountInfoId": {
						"type": "string",
						"description": "Internal identification of the loyalty account info, if the loyalty program was a reason for granting the discount."
					},
					"name": {
						"type": "string",
						"description": "Name of the discount."
					},
					"pointsRedeemed": {
						"type": "integer",
						"description": "Loyalty points that were used to receive this discount",
						"format": "int32"
					},
					"voidInfo": {
						"$ref": "#/components/schemas/VoidInfo"
					}
				},
				"description": "Discount Information associated with the transaction. Discounts are applied to this transaction."
			},
			"ElectronicCheckConversionInfo": {
				"type": "object",
				"properties": {
					"isConverted": {
						"type": "boolean",
						"description": "Flag to indicate whether the check was successfully converted into an electronic fund transfer"
					},
					"maskedCheckAccountNumber": {
						"type": "string",
						"description": "Masked Account Number associated with the check retrieved from the EPS provider"
					}
				},
				"description": "Converted information associated with a physical check"
			},
			"EligibleItemInfo": {
				"type": "object",
				"properties": {
					"categoryCode": {
						"type": "string",
						"description": "Category code of purchased item"
					},
					"claimPrice": {
						"type": "integer",
						"description": "Total Cost of all units purchased in cents.",
						"format": "int32"
					},
					"isTenderBenefitEligible": {
						"type": "boolean",
						"description": "True if this item is eligible to receive tender benefits."
					},
					"itemCode": {
						"type": "string",
						"description": "Item code for the product."
					},
					"itemCodeLength": {
						"type": "integer",
						"description": "Item code length for the product.",
						"format": "int32"
					},
					"itemDiscountAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"lineItemBreakdowns": {
						"type": "array",
						"description": "Information breaking down the coverage of each individual item in a bundle.",
						"items": {
							"$ref": "#/components/schemas/LineItemBreakdownInfo"
						}
					},
					"purchasedQuantity": {
						"type": "integer",
						"description": "Quantity that are represented in this purchase.",
						"format": "int32"
					},
					"purchasedUnits": {
						"type": "integer",
						"description": "Indicates number of units associated with the eligible item",
						"format": "int32"
					},
					"subCategoryCode": {
						"type": "string",
						"description": "Subcategory code of purchased item"
					},
					"unitCategory": {
						"type": "string",
						"description": "Category of the unit purchased"
					}
				},
				"description": "Includes item related information for Eligible Tender"
			},
			"EmailAddressInfo": {
				"required": [
					"address",
					"type"
				],
				"type": "object",
				"properties": {
					"address": {
						"type": "string",
						"description": "The address."
					},
					"type": {
						"maxLength": 2147483647,
						"minLength": 1,
						"type": "string",
						"description": "The type."
					}
				},
				"description": "The Class Email address info."
			},
			"EmergencyContactInfo": {
				"required": [
					"contactCountry",
					"firstName",
					"idocType",
					"lastName",
					"phoneNumber"
				],
				"type": "object",
				"properties": {
					"contactCountry": {
						"type": "string",
						"description": "The contact country."
					},
					"firstName": {
						"pattern": "[a-z,A-Z]{2,25}",
						"type": "string",
						"description": "The first name."
					},
					"idocType": {
						"type": "string",
						"description": "The idoc type.",
						"enum": [
							"UNKNOWN_DOCUMENT",
							"COUNTRY_OF_RESIDENCE",
							"PASSPORT",
							"RESIDENT_CARD",
							"REDRESS_NUMBER",
							"US_DESTINATION_ADDRESS",
							"EMERGENCY_CONTACT_INFORMATION",
							"VISA",
							"I94_FORM",
							"MILITARY_ID",
							"NATIONAL_IDENTITY_CARD",
							"ALIEN_REGISTRATION_NUMBER",
							"BORDER_CROSSING_CARD",
							"REFUGEE_TRAVEL_DOCUMENT",
							"PILOT_LICENSE",
							"KNOWN_TRAVELER_NUMBER",
							"NATURALIZATION_CERTIFICATE",
							"OTHER"
						]
					},
					"lastName": {
						"pattern": "[a-zA-Z0-9]{1,35}",
						"type": "string",
						"description": "The last name."
					},
					"phoneNumber": {
						"pattern": "[0-9]{5,12}",
						"type": "string",
						"description": "The phone number."
					}
				},
				"description": "The Class Emergency contact info."
			},
			"EmployeeInfo": {
				"type": "object",
				"properties": {
					"action": {
						"type": "string",
						"description": "Current employee action",
						"enum": [
							"TRANSACTION_CLOSED",
							"OTHER"
						]
					},
					"actionLabel": {
						"type": "string",
						"description": "Label of the employee action"
					},
					"authenticationMethod": {
						"type": "string",
						"description": "Method of authentication performed by employee for an action",
						"enum": [
							"UNKNOWN",
							"PIN",
							"PASSWORD",
							"BARCODE",
							"FINGERPRINT"
						]
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"id": {
						"type": "string",
						"description": "Identification of the employee."
					},
					"isTippableEmployee": {
						"type": "boolean",
						"description": "True if this employee should be tipped for this transaction."
					},
					"name": {
						"type": "string",
						"description": "Name of the employee."
					},
					"roleId": {
						"type": "string",
						"description": "Current role of the employee."
					},
					"roleName": {
						"type": "string",
						"description": "Name of the role."
					},
					"shiftId": {
						"type": "string",
						"description": "Identification of the shift of the employee."
					}
				},
				"description": "Employee Information associated with the Transaction."
			},
			"EndOfDaySummary": {
				"type": "object",
				"properties": {
					"denominationCount": {
						"$ref": "#/components/schemas/DenominationCount"
					},
					"tenderSummaries": {
						"type": "array",
						"description": "End of day summary for tenders",
						"items": {
							"$ref": "#/components/schemas/TenderSummaryInfo"
						}
					},
					"totalReturns": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"totalSales": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"totalTaxes": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"totalTips": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"transactionCount": {
						"type": "integer",
						"description": "Count of transactions for the business day",
						"format": "int32"
					}
				},
				"description": "End of Day Summary Information related to Transaction."
			},
			"FindTLogRequest": {
				"type": "object",
				"properties": {
					"businessDay": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"cardLastFourDigits": {
						"type": "array",
						"description": "The card last four digits from the Tender Information which was used in the transaction.",
						"items": {
							"type": "string",
							"description": "The card last four digits from the Tender Information which was used in the transaction."
						}
					},
					"closeDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"couponIds": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "External id of the coupon/voucher associated with Coupon information.",
						"items": {
							"type": "string",
							"description": "External id of the coupon/voucher associated with Coupon information."
						}
					},
					"customerEmail": {
						"type": "string",
						"description": "Customer's email address, may be used for digital receipt purposes."
					},
					"customerId": {
						"type": "string",
						"description": "The customer ID belonging to the external system."
					},
					"customerName": {
						"type": "string",
						"description": "Customer's name"
					},
					"customerPhoneNumber": {
						"type": "string",
						"description": "Customer's phone number"
					},
					"dataProviderName": {
						"type": "string",
						"description": "Name of the originating system or channel that provided the transaction. e.g. 'Aloha'"
					},
					"dataProviderVersion": {
						"type": "string",
						"description": "Version of the originating system or channel that provided the transaction. e.g. '16.2'."
					},
					"destinationAccount": {
						"type": "string",
						"description": "Identification of the related entity. Dependent on the account type related to Cash Management Destination Id."
					},
					"discountIds": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "Discount Id associated with Discount Information as understood by POS system. Unique within site.",
						"items": {
							"type": "string",
							"description": "Discount Id associated with Discount Information as understood by POS system. Unique within site."
						}
					},
					"employeeId": {
						"type": "string",
						"description": "Employee Id based on the transaction category for the transaction."
					},
					"employeeName": {
						"type": "string",
						"description": "Employee Name based on the transaction category for the transaction"
					},
					"endTransactionDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"externalLoyaltyAccountIds": {
						"type": "array",
						"description": "The LoyaltyAccount accountIds from the Loyalty Account Information which was used in the transaction.",
						"items": {
							"type": "string",
							"description": "The LoyaltyAccount accountIds from the Loyalty Account Information which was used in the transaction."
						}
					},
					"fromGrandAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"fromReceivedDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"fromTenderAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"fromTransactionDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"fuelSaleType": {
						"type": "string",
						"description": "Type of the fuel sale",
						"enum": [
							"UNKNOWN",
							"PREPAY_START",
							"PREPAY_END",
							"POSTPAY",
							"PAY_AT_PUMP",
							"MANUAL"
						]
					},
					"fuelShiftId": {
						"type": "string",
						"description": "Shift id associated with the fuel transaction"
					},
					"fuelingPointId": {
						"type": "string",
						"description": "Fueling point/Pump number associated with the transaction"
					},
					"grandAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"hasFuelSaleItems": {
						"type": "boolean",
						"description": "True if transaction contains fuel sale items."
					},
					"hasPharmacyItems": {
						"type": "boolean",
						"description": "True if transaction contains pharmacy items."
					},
					"internalLoyaltyAccountIds": {
						"type": "array",
						"description": "The LoyaltyAccount ids from the Loyalty Account Information which was used in the transaction.",
						"items": {
							"type": "string",
							"description": "The LoyaltyAccount ids from the Loyalty Account Information which was used in the transaction."
						}
					},
					"isItemReturn": {
						"type": "boolean",
						"description": "Flag is set to true in case the item was returned by the customer and money given back, otherwise False."
					},
					"isItemReturnAffectsInventory": {
						"type": "boolean",
						"description": "Flag is set to true in case the item was returned to inventory, False if the item was discarded and not returned to inventory."
					},
					"isItemVoided": {
						"type": "boolean",
						"description": "Flag is set to true in case the item was voided, otherwise False. If entire transaction is voided, it is not necessary to go into all IsVoided fields and set them to 'true'."
					},
					"isOpenTransaction": {
						"type": "boolean",
						"description": "If true, looks for transactions that are still open and are in progress. If false, looks for transactions that have been completed and payed for. These types of transactions primarily exist in hospitality."
					},
					"isPharmacyItemRejected": {
						"type": "boolean",
						"description": "True if the pharmacy item is rejected."
					},
					"isRecalled": {
						"type": "boolean",
						"description": "Flag if the transaction was ever recalled."
					},
					"isResumed": {
						"type": "boolean",
						"description": "Flag if the transaction was ever recalled / resumed / retrieved."
					},
					"isSuspended": {
						"type": "boolean",
						"description": "Flag if the transaction was ever saved / suspended"
					},
					"isTrainingMode": {
						"type": "boolean",
						"description": "Flag indicating training mode."
					},
					"isVoided": {
						"type": "boolean",
						"description": "Flag to check whether transaction is marked as voided or not."
					},
					"itemActualUnitPrice": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"itemDepartmentIds": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "In case of item sell - the department ID linked to the item. In case of department sale - the department ID. Not used in Hospitality.",
						"items": {
							"type": "string",
							"description": "In case of item sell - the department ID linked to the item. In case of department sale - the department ID. Not used in Hospitality."
						}
					},
					"itemDiscountIds": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "List of DiscountIds associated with a Item in a transaction.",
						"items": {
							"type": "string",
							"description": "List of DiscountIds associated with a Item in a transaction."
						}
					},
					"itemProductIds": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "List of Product Ids. The main product ID, sometimes is the SKU code (stock keeping unit) or EAN. Unique and consistent identification within a location / tenant.",
						"items": {
							"type": "string",
							"description": "List of Product Ids. The main product ID, sometimes is the SKU code (stock keeping unit) or EAN. Unique and consistent identification within a location / tenant."
						}
					},
					"itemPromotionIds": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "Promotion Id associated withItem  Promotion Information as understood by POS system. Unique within site.",
						"items": {
							"type": "string",
							"description": "Promotion Id associated withItem  Promotion Information as understood by POS system. Unique within site."
						}
					},
					"itemRegularUnitPrice": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"linkedTransactionIds": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The unique identifiers of the linked transactions. Represented by the 'transactionLinkId' field in the find API request/response.",
						"items": {
							"type": "string",
							"description": "The unique identifiers of the linked transactions. Represented by the 'transactionLinkId' field in the find API request/response."
						}
					},
					"loyaltyCardNumbers": {
						"type": "array",
						"description": "Deprecated: The loyalty account ids from the Loyalty Account Information which was used in the transaction.",
						"deprecated": true,
						"items": {
							"type": "string",
							"description": "Deprecated: The loyalty account ids from the Loyalty Account Information which was used in the transaction.",
							"deprecated": true
						}
					},
					"nameOnCard": {
						"type": "array",
						"description": "The name on the card used in a given transaction",
						"items": {
							"type": "string",
							"description": "The name on the card used in a given transaction"
						}
					},
					"nozzleId": {
						"type": "string",
						"description": "Nozzle/Hose number associated with the transaction"
					},
					"pageNumber": {
						"maximum": 214748,
						"minimum": 0,
						"type": "integer",
						"format": "int32"
					},
					"pageSize": {
						"maximum": 10000,
						"minimum": 10,
						"type": "integer",
						"format": "int32"
					},
					"promotionIds": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "Promotion Id associated with Promotion Information as understood by POS system. Unique within site.",
						"items": {
							"type": "string",
							"description": "Promotion Id associated with Promotion Information as understood by POS system. Unique within site."
						}
					},
					"receiptNumber": {
						"type": "string",
						"description": "Identification of the transaction/receipt as presented to the customer (shown or printed on the receipt)."
					},
					"returnedFields": {
						"maxItems": 2147483647,
						"minItems": 0,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"businessDayUtc",
								"employeeIds",
								"employeeNames",
								"destinationAccount",
								"endTransactionDateTimeUtc",
								"closeDateTimeUtc",
								"grandAmount",
								"sourceAccount",
								"siteInfoId",
								"tlogId",
								"touchPointId",
								"isTrainingMode",
								"transactionNumber",
								"transactionType",
								"isVoided",
								"transactionCategory",
								"itemCount",
								"loyaltyCardNumbers",
								"isSuspended",
								"receivedDateTimeUtc",
								"fuelingPointId"
							]
						}
					},
					"rxNumber": {
						"type": "array",
						"description": "Prescription number of the pharmacy item.",
						"items": {
							"type": "string",
							"description": "Prescription number of the pharmacy item."
						}
					},
					"siteInfoIds": {
						"type": "array",
						"description": "Site identification as known by customer. Unique within one tenant",
						"items": {
							"type": "string",
							"description": "Site identification as known by customer. Unique within one tenant"
						}
					},
					"sourceAccount": {
						"type": "string",
						"description": "Identification of the related entity. Dependent on the account type related to Cash Management Source Id."
					},
					"tenderAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"tenderId": {
						"type": "string",
						"description": "The ID of the tender used to pay for the transaction. External id of the tender."
					},
					"tenderTypes": {
						"type": "array",
						"description": "The type of the tender. e.g. cash, credit card, gift card etc.",
						"items": {
							"type": "string",
							"description": "The type of the tender. e.g. cash, credit card, gift card etc.",
							"enum": [
								"GENERIC",
								"CASH",
								"CREDIT_CARD",
								"DEBIT_CARD",
								"CASH_CARD",
								"GIFT_CARD",
								"GIFT_CERTIFICATE",
								"HOUSE_ACCOUNT",
								"PROPERTY_MANAGEMENT",
								"ACCOUNTS_RECEIVABLE",
								"ROOM_CHARGE",
								"SAVED_CUSTOMER",
								"CAMPUS_CARD",
								"MEAL_VOUCHER",
								"CHECK",
								"ELECTRONIC_BENEFIT_TRANSFER_CASH",
								"ELECTRONIC_BENEFIT_TRANSFER_FOOD_STAMP",
								"DRIVE_OR_WALK_OFF",
								"MANUFACTURER_COUPON",
								"MONEY_ORDER",
								"FLEXIBLE_SPENDING_ACCOUNT",
								"LOCAL_ACCOUNT",
								"WIC_ELECTRONIC",
								"WIC_SMARTCARD",
								"TRAVELERS_CHECK",
								"LOYALTY_POINTS",
								"STORED_VALUE",
								"DONATION",
								"SMART_WIC",
								"MOBILE",
								"VOUCHER"
							]
						}
					},
					"tlogId": {
						"type": "string",
						"description": "Primary unique opaque identification of the transaction."
					},
					"toGrandAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"toReceivedDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"toTenderAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"toTransactionDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"touchPointGroups": {
						"type": "array",
						"description": "A logical grouping of touch point. A Touchpoint can be any client, e.g. a POS Terminal, Self Checkout.",
						"items": {
							"type": "string",
							"description": "A logical grouping of touch point. A Touchpoint can be any client, e.g. a POS Terminal, Self Checkout."
						}
					},
					"touchPointId": {
						"type": "string",
						"description": "The ID of the last terminal / touch point / POS id where the transaction occurred. Unique within the site."
					},
					"touchPointType": {
						"type": "string",
						"description": "The last front end register type in which the transaction was performed such as: POS, Mobile, e-Commerce, fuel POS etc."
					},
					"transactionCategories": {
						"type": "array",
						"description": "The category of the transaction: Sale or return, control, cash office or unknown.",
						"items": {
							"type": "string",
							"description": "The category of the transaction: Sale or return, control, cash office or unknown.",
							"enum": [
								"SALE_OR_RETURN",
								"CONTROL",
								"CASH_OFFICE",
								"APEX_TRANSACTION",
								"TANK_FUEL_READING_TRANSACTION",
								"PUMP_FUEL_READING_TRANSACTION",
								"FUEL_DELIVERY_TRANSACTION",
								"PUMP_FUEL_TEST_TRANSACTION",
								"CUSTOM_TRANSACTION",
								"STORED_VALUE_TRANSACTION"
							]
						},
						"enum": [
							"SALE_OR_RETURN",
							"CONTROL",
							"CASH_OFFICE",
							"APEX_TRANSACTION",
							"TANK_FUEL_READING_TRANSACTION",
							"PUMP_FUEL_READING_TRANSACTION",
							"FUEL_DELIVERY_TRANSACTION",
							"PUMP_FUEL_TEST_TRANSACTION",
							"CUSTOM_TRANSACTION",
							"STORED_VALUE_TRANSACTION"
						]
					},
					"transactionNumber": {
						"type": "string",
						"description": "Transaction number based on POS (fully up to POS whether this is unique within a site or business day or terminal or all)."
					},
					"transactionTypes": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The type of the transaction.",
						"items": {
							"type": "string",
							"description": "The type of the transaction.",
							"enum": [
								"SALES",
								"RETURN",
								"SIGN_ON",
								"SIGN_OFF",
								"START_OF_DAY",
								"INVALID_PASSWORD",
								"CHANGE_PASSWORD",
								"RESET_PASSWORD",
								"TERMINAL_LOCK",
								"TERMINAL_UNLOCK",
								"DRAWER_OPEN",
								"END_OF_DAY",
								"TERMINAL_UP",
								"TERMINAL_DOWN",
								"SECURITY_ID_ENABLED",
								"SECURITY_ID_DISABLED",
								"DRAWER_ASSIGNMENT",
								"DRAWER_RETURN",
								"CONFIRMATION",
								"COUNT",
								"OPEN_LOAN",
								"ADD_LOAN",
								"SAFE_DROP",
								"PAY_IN",
								"PAY_OUT",
								"BANK_DEPOSIT",
								"BANK_RECEIPT",
								"TRANSFER",
								"PRICE_CHANGE",
								"UNKNOWN",
								"BLIND_PICKUP",
								"TENDER_EXCHANGE",
								"BLIND_PICKUP_REQUEST"
							]
						}
					}
				},
				"description": "FindTLogRequest object used for the search criteria"
			},
			"FindTLogResponse": {
				"type": "object",
				"properties": {
					"lastPage": {
						"type": "boolean"
					},
					"pageContent": {
						"type": "array",
						"description": "The actual content for collection of documents for the TLogInfo",
						"items": {
							"$ref": "#/components/schemas/TLogInfo"
						}
					},
					"pageNumber": {
						"type": "integer",
						"format": "int32"
					},
					"totalPages": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					},
					"totalResults": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					}
				},
				"description": "Returns the TLog Response Object based on the search criteria."
			},
			"FindTdmSubscriptionResponse": {
				"type": "object",
				"properties": {
					"lastPage": {
						"type": "boolean"
					},
					"pageContent": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/TdmSubscriptionBasicViewData"
						}
					},
					"pageNumber": {
						"type": "integer",
						"format": "int32"
					},
					"totalPages": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					},
					"totalResults": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"FlightSegmentInfo": {
				"required": [
					"arrivalAirport",
					"arrivalAirportName",
					"boardingDepartureDatetime",
					"changeOfGaugeFlight",
					"codeShareFlight",
					"departureAirport",
					"departureAirportName",
					"estimatedArrivalDatetime",
					"estimatedDepartureDatetime",
					"flightNumber",
					"flightStatus",
					"hostId",
					"id",
					"internationalSegment",
					"marketingAirline",
					"operatingAirline",
					"otherAirlineFlight",
					"scheduledArrivalDatetime",
					"scheduledDepartureDatetime"
				],
				"type": "object",
				"properties": {
					"arrivalAirport": {
						"pattern": "[a-zA-Z]{3}",
						"type": "string",
						"description": "The arrival airport."
					},
					"arrivalAirportName": {
						"maxLength": 2147483647,
						"minLength": 1,
						"type": "string",
						"description": "The arrival city name."
					},
					"arrivalGate": {
						"maxLength": 2147483647,
						"minLength": 1,
						"type": "string",
						"description": "The arrival gate."
					},
					"arrivalTerminal": {
						"maxLength": 2147483647,
						"minLength": 1,
						"type": "string",
						"description": "The arrival terminal."
					},
					"boardingDepartureDatetime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"changeOfGaugeFlight": {
						"type": "boolean",
						"description": "The change of gauge flight."
					},
					"codeShareFlight": {
						"type": "boolean",
						"description": "The code share flight."
					},
					"cogFlightSegmentIds": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The cog flight segment ids.",
						"items": {
							"type": "integer",
							"description": "The cog flight segment ids.",
							"format": "int32"
						}
					},
					"departureAirport": {
						"pattern": "[a-zA-Z]{3}",
						"type": "string",
						"description": "The departure airport."
					},
					"departureAirportName": {
						"maxLength": 2147483647,
						"minLength": 1,
						"type": "string",
						"description": "The departure city name"
					},
					"departureGate": {
						"maxLength": 2147483647,
						"minLength": 1,
						"type": "string",
						"description": "The departure gate."
					},
					"departureTerminal": {
						"maxLength": 2147483647,
						"minLength": 1,
						"type": "string",
						"description": "The departure terminal."
					},
					"equipmentCode": {
						"maxLength": 2147483647,
						"minLength": 1,
						"type": "string",
						"description": "The equipment code."
					},
					"equipmentName": {
						"maxLength": 2147483647,
						"minLength": 1,
						"type": "string",
						"description": "The equipment name."
					},
					"estimatedArrivalDatetime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"estimatedDepartureDatetime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"flightNumber": {
						"pattern": "[0-9]{1,4}[A-Z]?",
						"type": "string",
						"description": "The flight number."
					},
					"flightStatus": {
						"type": "string",
						"description": "The flight status",
						"enum": [
							"UNKNOWN",
							"ON_TIME",
							"DELAYED",
							"CANCELLED"
						]
					},
					"hostId": {
						"pattern": "[0-9]{1,3}",
						"type": "string",
						"description": "The host id."
					},
					"id": {
						"pattern": "[0-9]{1,3}",
						"type": "string",
						"description": "The id."
					},
					"internationalSegment": {
						"type": "boolean",
						"description": "The international segment."
					},
					"marketingAirline": {
						"$ref": "#/components/schemas/AirlineInfo"
					},
					"operatingAirline": {
						"$ref": "#/components/schemas/AirlineInfo"
					},
					"otherAirlineFlight": {
						"type": "boolean",
						"description": "The other airline flight."
					},
					"scheduledArrivalDatetime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"scheduledDepartureDatetime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"stopoverAirports": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The stopover airports.",
						"items": {
							"type": "string",
							"description": "The stopover airports."
						}
					}
				},
				"description": "The Class Flight segment info."
			},
			"FuelBlendInfo": {
				"type": "object",
				"properties": {
					"blendInfo": {
						"$ref": "#/components/schemas/BlendInfo"
					},
					"gradeId": {
						"type": "string",
						"description": "Grade/Tier number associated with the transaction"
					},
					"tankId": {
						"type": "string",
						"description": "Tank id associated with the transaction"
					}
				},
				"description": "Fuel Sale Information associated with a Fuel Sale Transaction"
			},
			"FuelDeliveryTransaction": {
				"required": [
					"tankDeliveries"
				],
				"type": "object",
				"properties": {
					"deliveryDateTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"fuelReadingType": {
						"type": "string",
						"description": "The type of reading/delivery this is, whether end of day, at a point in time, at price change, or during delivery",
						"deprecated": true,
						"enum": [
							"UNKNOWN",
							"END_OF_DAY",
							"PRICE_CHANGE",
							"DELIVERY",
							"POINT_READING"
						]
					},
					"supplier": {
						"type": "string",
						"description": "Supplier of fuel for this delivery"
					},
					"tankDeliveries": {
						"type": "array",
						"description": "List of tank deliveries associated with this transaction.",
						"items": {
							"$ref": "#/components/schemas/TankDelivery"
						}
					}
				},
				"description": "Tank Delivery Transaction captures information related to Tank deliveries."
			},
			"FuelSaleInfo": {
				"type": "object",
				"properties": {
					"controllerSequenceNumber": {
						"type": "string",
						"description": "A reference number generated by the controller for every fuel dispensing"
					},
					"endFuelingDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"fuelBlends": {
						"type": "array",
						"description": "List of fuel information associated with blended products",
						"items": {
							"$ref": "#/components/schemas/FuelBlendInfo"
						}
					},
					"fuelShiftId": {
						"type": "string",
						"description": "Shift id associated with the fuel transaction"
					},
					"fuelingPointId": {
						"type": "string",
						"description": "Fueling point/Pump number associated with the transaction"
					},
					"gradeId": {
						"type": "string",
						"description": "Grade/Tier number associated with the transaction"
					},
					"nozzleId": {
						"type": "string",
						"description": "Nozzle/Hose number associated with the transaction"
					},
					"priceType": {
						"type": "string",
						"description": "Price based on Tender used",
						"enum": [
							"UNKNOWN",
							"CASH",
							"CREDIT"
						]
					},
					"priceTypeLabel": {
						"type": "string",
						"description": "Price Type Label to contain values if PriceType is UNKNOWN"
					},
					"serviceType": {
						"type": "string",
						"description": "Type of service at the pump",
						"enum": [
							"UNKNOWN",
							"FULL",
							"SELF"
						]
					},
					"serviceTypeLabel": {
						"type": "string",
						"description": "Service Type Label to contain values if ServiceType is UNKNOWN"
					},
					"startFuelingDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"tankId": {
						"type": "string",
						"description": "Tank id information associated with the transaction"
					},
					"type": {
						"type": "string",
						"description": "Type of the fuel sale",
						"enum": [
							"UNKNOWN",
							"PREPAY_START",
							"PREPAY_END",
							"POSTPAY",
							"PAY_AT_PUMP",
							"MANUAL"
						]
					}
				},
				"description": "Fuel Sale Information associated with a Fuel Sale Transaction"
			},
			"GcpCloudFunctionsMetadata": {
				"required": [
					"projectId",
					"region"
				],
				"type": "object",
				"properties": {
					"projectId": {
						"maxLength": 30,
						"minLength": 6,
						"pattern": "^[a-z][a-z0-9-]*[a-z0-9]$",
						"type": "string",
						"description": "The GCP project id for where the functions are deployed."
					},
					"region": {
						"pattern": "^[a-z0-9-]*$",
						"type": "string",
						"description": "The GCP region for where the functions are deployed."
					}
				},
				"description": "The data for functions deployed in GCP Cloud Functions."
			},
			"GetCustomPropertyResponse": {
				"type": "object",
				"properties": {
					"lastPage": {
						"type": "boolean"
					},
					"pageContent": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/CustomPropertyViewData"
						}
					},
					"pageNumber": {
						"type": "integer",
						"format": "int32"
					},
					"totalPages": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					},
					"totalResults": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"GetMultipleCanonicalTLogsResponse": {
				"type": "object",
				"properties": {
					"tlogs": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/CanonicalTLogViewData"
						}
					}
				},
				"description": "Response object of getting multiple canonical tlogs by tlog ids"
			},
			"GetTLogVersionsResponse": {
				"type": "object",
				"properties": {
					"lastPage": {
						"type": "boolean"
					},
					"pageContent": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/TLogVersionViewData"
						}
					},
					"pageNumber": {
						"type": "integer",
						"format": "int32"
					},
					"totalPages": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					},
					"totalResults": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"InvalidCredentialsException": {
				"type": "object",
				"properties": {
					"businessMessage": {
						"type": "string"
					},
					"details": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"errorType": {
						"type": "string"
					}
				}
			},
			"Item": {
				"type": "object",
				"properties": {
					"actualAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"actualUnitPrice": {
						"$ref": "#/components/schemas/QuantitativeMoneyInfo"
					},
					"beginDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"catalogItemCode": {
						"type": "string",
						"description": "The catalog item id."
					},
					"category": {
						"$ref": "#/components/schemas/ItemCategoryInfo"
					},
					"conceptId": {
						"type": "string",
						"description": "One company can run multiple franchises and this field is to assign the item to one of the concepts."
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"departmentId": {
						"type": "string",
						"description": "In case of item sell - the department ID linked to the item. In case of department sale - the department ID. Not used in Hospitality"
					},
					"employee": {
						"$ref": "#/components/schemas/EmployeeInfo"
					},
					"endDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"entryMethod": {
						"type": "string",
						"description": "Entry Method information for the Item.",
						"enum": [
							"KEYED",
							"INTEGRATED_CHIP_CARD",
							"MEASURED",
							"MICR",
							"MSR",
							"RFID",
							"SELF_SCAN",
							"SCANNED",
							"SMART_CARD",
							"TAPPED",
							"WAVED",
							"WEIGHED",
							"UNKNOWN",
							"AUTOMATIC"
						]
					},
					"entryMethodLabel": {
						"type": "string",
						"description": "Used for values not in the entryMethod enum. You must specify the entryMethod field to use this field."
					},
					"extendedAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"extendedUnitPrice": {
						"$ref": "#/components/schemas/QuantitativeMoneyInfo"
					},
					"fuelSaleInfo": {
						"$ref": "#/components/schemas/FuelSaleInfo"
					},
					"id": {
						"type": "string",
						"description": "Item ID uniquely identifies the item in the transaction. Unique within the transaction"
					},
					"inputIdentifierData": {
						"type": "string",
						"description": "Data entered or scanned that is used to identify the item."
					},
					"inventoryQuantity": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"isInventoryAffectedByReturn": {
						"type": "boolean",
						"description": "Flag is set to true in case the item was returned to inventory, False if the item was discarded and not returned to inventory"
					},
					"isItemNotOnFile": {
						"type": "boolean",
						"description": "Indicates if the item is not on file in the store. Ex. Absent from the item catalog."
					},
					"isNonSaleItem": {
						"type": "boolean",
						"description": "Deprecated: Please use itemSellType as this field may be removed in future versions. The item is not present in sales. In Hospitality this is a.k.a. revenue item",
						"deprecated": true
					},
					"isOverridden": {
						"type": "boolean",
						"description": "True in case item price was changed, and is different from its regular price."
					},
					"isPriceLookUp": {
						"type": "boolean",
						"description": "Identifies this Item as a Price Lookup/Price Query Item. This Item has only been scanned to check its price."
					},
					"isRefused": {
						"type": "boolean",
						"description": "True in case the item sale is refused"
					},
					"isReturn": {
						"type": "boolean",
						"description": "Flag is set to true in case the item was returned by the customer and money given back, otherwise False"
					},
					"isVoided": {
						"type": "boolean",
						"description": "Flag is set to true in case the item was voided, otherwise False. If entire transaction is voided, it is not necessary to go into all IsVoided fields and set them to 'true'."
					},
					"isWeighted": {
						"type": "boolean",
						"description": "True in case the item is a weighted item."
					},
					"itemDiscounts": {
						"type": "array",
						"description": "List of discounts applied to the item",
						"items": {
							"$ref": "#/components/schemas/DiscountInfo"
						}
					},
					"itemLinkType": {
						"type": "string",
						"description": "Type of the itemLink, which links to a different item.",
						"enum": [
							"UNKNOWN",
							"DEPOSIT",
							"MODIFIER",
							"VOID",
							"FUEL_PREPAY_FINALIZED",
							"TARE",
							"BOTTLE_DEPOSIT",
							"WARRANTY"
						]
					},
					"itemLinkTypeLabel": {
						"type": "string",
						"description": "Label field, reserved for future use, to be able to describe the itemLink in more detail."
					},
					"itemPharmacyInfo": {
						"$ref": "#/components/schemas/ItemPharmacyInfo"
					},
					"itemPromotions": {
						"type": "array",
						"description": "List of promotions applied to the item",
						"items": {
							"$ref": "#/components/schemas/PromotionInfo"
						}
					},
					"itemSellType": {
						"type": "string",
						"description": "The type of sale for this item. This may indicate the item was not present in the sale. In Hospitality this is a.k.a revenue item.",
						"enum": [
							"UNKNOWN",
							"SALES",
							"NON_SALES",
							"TENDER",
							"LOTTERY_WINNINGS"
						]
					},
					"itemSellTypeLabel": {
						"type": "string",
						"description": "Used for values not in the itemSellType enum. You must specify the itemSellType field to use this field."
					},
					"itemStoredValue": {
						"$ref": "#/components/schemas/ItemStoredValueInfo"
					},
					"itemTaxes": {
						"type": "array",
						"description": "Taxes applied on the item",
						"items": {
							"$ref": "#/components/schemas/TaxInfo"
						}
					},
					"itemTenderRewards": {
						"type": "array",
						"description": "List of rewards applied as a tender for an item",
						"items": {
							"$ref": "#/components/schemas/TenderRewardInfo"
						}
					},
					"lineItemBreakdowns": {
						"type": "array",
						"description": "Information pertaining to one or more line items",
						"items": {
							"$ref": "#/components/schemas/LineItemBreakdownInfo"
						}
					},
					"operatorBypassApprovalInfo": {
						"$ref": "#/components/schemas/OperatorBypassApprovalInfo"
					},
					"operatorBypassApprovals": {
						"type": "array",
						"description": "List of information regarding operator bypass approvals",
						"items": {
							"$ref": "#/components/schemas/OperatorBypassApprovalInfo"
						}
					},
					"orderNumber": {
						"type": "string",
						"description": "Indicates the order id of the fulfilled order in a click and collect transaction fulfilled in a store or an order fulfilled and shipped from a warehouse."
					},
					"overrideInfo": {
						"$ref": "#/components/schemas/OverrideInfo"
					},
					"parentItemId": {
						"type": "string",
						"description": "If set, it says the item modifies another item identified by the id given here."
					},
					"productId": {
						"type": "string",
						"description": "The main product ID, sometimes is the SKU code (stock keeping unit) or EAN. Unique and consistent identification within a location / tenant."
					},
					"productName": {
						"type": "string",
						"description": "Name of the product. For open items this contains name of the item."
					},
					"quantity": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"refusalInfo": {
						"$ref": "#/components/schemas/RefusalInfo"
					},
					"regularUnitPrice": {
						"$ref": "#/components/schemas/QuantitativeMoneyInfo"
					},
					"returnInfo": {
						"$ref": "#/components/schemas/ItemReturnInfo"
					},
					"revenueCenter": {
						"$ref": "#/components/schemas/RevenueCenterInfo"
					},
					"surcharges": {
						"type": "array",
						"description": "List of Surcharges, e.g. 'Eco fee'",
						"items": {
							"$ref": "#/components/schemas/SurchargeInfo"
						}
					},
					"tareWeight": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"tareWrapper": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"variations": {
						"type": "array",
						"description": "Variation Information. e.g. a t-shirt can be XL-sized and blue.",
						"items": {
							"$ref": "#/components/schemas/VariationInfo"
						}
					},
					"voidInfo": {
						"$ref": "#/components/schemas/VoidInfo"
					},
					"wicInfo": {
						"$ref": "#/components/schemas/ItemWICInfo"
					}
				},
				"description": "Transaction Item"
			},
			"ItemCategoryInfo": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Category identification"
					},
					"name": {
						"type": "string",
						"description": "Name of the category"
					}
				},
				"description": "Item Category"
			},
			"ItemPharmacyInfo": {
				"type": "object",
				"properties": {
					"fillNumber": {
						"type": "string",
						"description": "Number of the refill. Prescription may contain multiple refills."
					},
					"isRejected": {
						"type": "boolean",
						"description": "Identifies if the pharmacy item was rejected to be sold."
					},
					"partialFillNumber": {
						"type": "string",
						"description": "Number of the partial refill. Multiple partial refills may exist for one prescription."
					},
					"patientId": {
						"type": "string",
						"description": "Id of the patient internal to the transaction."
					},
					"priceSource": {
						"type": "string",
						"description": "Source of where the price for pharmacy item came form."
					},
					"promptAcknowledgments": {
						"type": "array",
						"description": "List of patient acknowledgments for this item together with their requirement status.",
						"items": {
							"$ref": "#/components/schemas/PharmacyPromptDetails"
						}
					},
					"rejectedInfo": {
						"$ref": "#/components/schemas/PharmacyRejectedInfo"
					},
					"rxNumber": {
						"type": "string",
						"description": "Pharmacy prescription number."
					},
					"sellMode": {
						"type": "string",
						"description": "Identifies how the pharmacy were sold."
					},
					"thirdPartyCoverages": {
						"type": "array",
						"description": "List of information about third party coverage or insurance.",
						"items": {
							"$ref": "#/components/schemas/ThirdPartyCoverage"
						}
					}
				},
				"description": "Information Related to Pharmacy Item."
			},
			"ItemReturnInfo": {
				"type": "object",
				"properties": {
					"disposalValue": {
						"type": "string",
						"description": "Disposal method of returned item."
					},
					"originalItemId": {
						"type": "string",
						"description": "Original item id for returned item."
					},
					"returnId": {
						"type": "string",
						"description": "ID of the return."
					},
					"returnReason": {
						"type": "string",
						"description": "Reason for the return."
					}
				},
				"description": "Return information about returned item."
			},
			"ItemStoredValueInfo": {
				"type": "object",
				"properties": {
					"activationDateTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"currentBalance": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"initialBalance": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"isReloadable": {
						"type": "boolean",
						"description": "Identifies if funds can be added"
					},
					"soldDateTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"storedValueAuthorization": {
						"$ref": "#/components/schemas/TenderAuthorizationInfo"
					},
					"storedValueId": {
						"type": "string",
						"description": "External identification associated to the stored value"
					},
					"type": {
						"type": "string",
						"description": "The type of stored value action",
						"enum": [
							"UNKNOWN",
							"RELOAD",
							"ACTIVATION"
						]
					}
				},
				"description": "Information related to the stored value of the item"
			},
			"ItemWICInfo": {
				"type": "object",
				"properties": {
					"isWICCVB": {
						"type": "boolean",
						"description": "Identifies if the item is a cash value benefit WIC Item."
					},
					"notToExceedAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"notToExceedLostAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"wicAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"wicQuantity": {
						"$ref": "#/components/schemas/QuantityInfo"
					}
				},
				"description": "WIC information about an item"
			},
			"KeyValueData": {
				"required": [
					"key"
				],
				"type": "object",
				"properties": {
					"key": {
						"type": "string"
					},
					"value": {
						"maxLength": 512,
						"minLength": 1,
						"type": "string"
					}
				}
			},
			"KnownTravelerNumberInfo": {
				"required": [
					"idocType",
					"number"
				],
				"type": "object",
				"properties": {
					"idocType": {
						"type": "string",
						"description": "The idoc type.",
						"enum": [
							"UNKNOWN_DOCUMENT",
							"COUNTRY_OF_RESIDENCE",
							"PASSPORT",
							"RESIDENT_CARD",
							"REDRESS_NUMBER",
							"US_DESTINATION_ADDRESS",
							"EMERGENCY_CONTACT_INFORMATION",
							"VISA",
							"I94_FORM",
							"MILITARY_ID",
							"NATIONAL_IDENTITY_CARD",
							"ALIEN_REGISTRATION_NUMBER",
							"BORDER_CROSSING_CARD",
							"REFUGEE_TRAVEL_DOCUMENT",
							"PILOT_LICENSE",
							"KNOWN_TRAVELER_NUMBER",
							"NATURALIZATION_CERTIFICATE",
							"OTHER"
						]
					},
					"number": {
						"pattern": "[0-9]{9}",
						"type": "string",
						"description": "The number."
					}
				},
				"description": "The Class KnownTravelerNumberInfo"
			},
			"LineItemBreakdownInfo": {
				"type": "object",
				"properties": {
					"lineNumbers": {
						"type": "string",
						"description": "Line number(s) of item"
					},
					"price": {
						"$ref": "#/components/schemas/QuantitativeMoneyInfo"
					}
				},
				"description": "Information pertaining to one or more line items"
			},
			"LinkedCanonicalTLogResponse": {
				"type": "object",
				"properties": {
					"lastPage": {
						"type": "boolean"
					},
					"pageContent": {
						"type": "array",
						"description": "The actual content of CanonicalTLogData",
						"items": {
							"$ref": "#/components/schemas/CanonicalTLogViewDataCanonicalTransaction"
						}
					},
					"pageNumber": {
						"type": "integer",
						"format": "int32"
					},
					"totalPages": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					},
					"totalResults": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					}
				},
				"description": "Response Object containing the LinkedCanonicalTLogResponse or empty collection list for the CanonicalTLogIdData."
			},
			"LinkedRawTLogContentResponse": {
				"type": "object",
				"properties": {
					"lastPage": {
						"type": "boolean"
					},
					"pageContent": {
						"type": "array",
						"description": "The actual page content.",
						"items": {
							"type": "array",
							"description": "The actual page content.",
							"items": {
								"type": "string",
								"description": "The actual page content.",
								"format": "byte"
							}
						}
					},
					"pageNumber": {
						"type": "integer",
						"format": "int32"
					},
					"totalPages": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					},
					"totalResults": {
						"minimum": 0,
						"type": "integer",
						"format": "int64"
					}
				},
				"description": "Response object containing the collection of LinkedRawTLogContentResponse or empty collection list."
			},
			"LinkedTransactionInfo": {
				"required": [
					"transactionId"
				],
				"type": "object",
				"properties": {
					"businessDate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"reasonCode": {
						"type": "string",
						"description": "The reason code for the linked transaction",
						"enum": [
							"RESUMED",
							"RETURNED",
							"VOIDED",
							"SUSPENDED",
							"SPLIT_TRANSACTION",
							"UNKNOWN",
							"FUEL_PREPAY_FINALIZED",
							"UPDATED"
						]
					},
					"reasonCodeLabel": {
						"type": "string",
						"description": "The original reason code for the linked transaction."
					},
					"transactionId": {
						"type": "string",
						"description": "The id of the linked transaction."
					}
				},
				"description": "Contains linked transaction information."
			},
			"Location": {
				"type": "object",
				"properties": {
					"location": {
						"type": "string",
						"description": "The specified name for a location."
					},
					"locationId": {
						"type": "string",
						"description": "The specified id for a location."
					}
				},
				"description": "Location"
			},
			"MktSysDataInfo": {
				"required": [
					"offersPurchasedList"
				],
				"type": "object",
				"properties": {
					"offersPurchasedList": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The offers purchased list.",
						"items": {
							"$ref": "#/components/schemas/OffersPurchasedInfo"
						}
					}
				},
				"description": "The Class MktSys data info."
			},
			"MoneyInfo": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "number",
						"description": "Value in Decimal Format - no spaces, decimal point is '.', negative number sign is '-' character."
					}
				},
				"description": "Money Information"
			},
			"OfferDetailsInfo": {
				"required": [
					"addOnType",
					"dateOfPurchase",
					"offerId",
					"offerShortDesc"
				],
				"type": "object",
				"properties": {
					"addOnType": {
						"pattern": "[a-zA-Z\\s]{3,50}",
						"type": "string",
						"description": "The add on type."
					},
					"dateOfPurchase": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"offerId": {
						"pattern": "[a-zA-Z0-9]{5,20}",
						"type": "string",
						"description": "The offer id."
					},
					"offerShortDesc": {
						"pattern": "[a-zA-Z0-9\\s]{10,1000}",
						"type": "string",
						"description": "The offer short desc"
					},
					"partnerDetails": {
						"type": "array",
						"description": "The partner details.",
						"items": {
							"$ref": "#/components/schemas/PartnerDetailsInfo"
						}
					}
				},
				"description": "The Class Offer details info."
			},
			"OffersPurchasedInfo": {
				"required": [
					"firstName",
					"lastName",
					"loyaltyNumber",
					"loyaltyProgram",
					"loyaltyTier",
					"offerDetails"
				],
				"type": "object",
				"properties": {
					"firstName": {
						"pattern": "[a-z,A-Z]{2,25}",
						"type": "string",
						"description": "The first name."
					},
					"lastName": {
						"pattern": "[a-zA-Z0-9]{1,35}",
						"type": "string",
						"description": "The last name."
					},
					"loyaltyNumber": {
						"pattern": "[a-zA-Z0-9]{5,20}",
						"type": "string",
						"description": "The loyalty number."
					},
					"loyaltyProgram": {
						"pattern": "[a-zA-Z\\s]{5,500}",
						"type": "string",
						"description": "The loyalty program."
					},
					"loyaltyTier": {
						"pattern": "[a-zA-Z\\s]{5,500}",
						"type": "string",
						"description": "The loyalty tier."
					},
					"offerDetails": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The offer details.",
						"items": {
							"$ref": "#/components/schemas/OfferDetailsInfo"
						}
					}
				},
				"description": "The Class Offers purchased info."
			},
			"OperatorBypassApprovalInfo": {
				"type": "object",
				"properties": {
					"actionType": {
						"type": "string",
						"description": "Action associated with the approval"
					},
					"approvalDateTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"description": {
						"type": "string",
						"description": "Description of the operator bypass approval"
					},
					"entryMethod": {
						"type": "string",
						"description": "How was the data entered",
						"enum": [
							"KEYED",
							"INTEGRATED_CHIP_CARD",
							"MEASURED",
							"MICR",
							"MSR",
							"RFID",
							"SELF_SCAN",
							"SCANNED",
							"SMART_CARD",
							"TAPPED",
							"WAVED",
							"WEIGHED",
							"UNKNOWN",
							"AUTOMATIC"
						]
					},
					"entryMethodLabel": {
						"type": "string",
						"description": "Used for values which are not in entryMethod"
					},
					"inputData": {
						"type": "string",
						"description": "Information that is used for verification of the restricted item or action for this bypass, such as date of birth or age."
					},
					"isApproved": {
						"type": "boolean",
						"description": "True if the bypass is approved"
					},
					"isDelayedApproval": {
						"type": "boolean",
						"description": "Indicates whether the approval/rejection is immediate or if it's delayed. If it's delayed another approval would need to happen."
					},
					"operator": {
						"$ref": "#/components/schemas/EmployeeInfo"
					},
					"policyName": {
						"type": "string",
						"description": "Name of the policy being bypassed by the operator"
					},
					"sequenceNumber": {
						"type": "string",
						"description": "Sequence number"
					}
				},
				"description": "Information regarding an operator bypass approval. Includes information on approval/refusal of a sale of restricted item."
			},
			"OrderInfo": {
				"type": "object",
				"properties": {
					"orderChannel": {
						"type": "string",
						"description": "Order Channel through which Order is being placed.",
						"enum": [
							"OTHER",
							"PHONE_IN",
							"WALK_IN",
							"WEB",
							"EMAIL",
							"CALL_CENTER",
							"MOBILE_APP",
							"DRIVE_THRU",
							"FAX",
							"FORECOURT"
						]
					},
					"orderChannelLabel": {
						"type": "string",
						"description": "Used for values not in the orderChannel enum. You must specify the orderChannel field to use this field."
					},
					"orderMode": {
						"$ref": "#/components/schemas/OrderModeInfo"
					},
					"orderNumber": {
						"type": "string",
						"description": "Unique Order Number for the transaction."
					},
					"orderSource": {
						"type": "string",
						"description": "Origin of the order like a third party ordering system, ordering device, or order aggregator."
					},
					"referenceId": {
						"type": "string",
						"description": "Additional order identification as required by customer."
					}
				},
				"description": "Order Information related to the Transaction."
			},
			"OrderModeInfo": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Id of the Order Mode."
					},
					"name": {
						"type": "string",
						"description": "Mode of the order, human readable id;. E.g. dining in, take out, delivery"
					}
				},
				"description": "Information related to the Order Mode."
			},
			"OriginalTenderInfo": {
				"type": "object",
				"properties": {
					"tenderId": {
						"type": "string",
						"description": "Contains the original Tender Id entered by the customer that was later changed or corrected by the payment provider."
					}
				},
				"description": "Information about Original Tender"
			},
			"OsiInfo": {
				"required": [
					"airline",
					"contentText"
				],
				"type": "object",
				"properties": {
					"airline": {
						"$ref": "#/components/schemas/AirlineInfo"
					},
					"contentText": {
						"type": "string",
						"description": "The content text."
					}
				},
				"description": "The Class OsiInfo."
			},
			"OverrideInfo": {
				"type": "object",
				"properties": {
					"overrideMethod": {
						"type": "string",
						"description": "Original Price is overridden either manually by cashier or automatically using bar code scanner",
						"enum": [
							"MANUAL",
							"AUTOMATIC"
						]
					},
					"overrideReason": {
						"type": "string",
						"description": "Reason for Override.\\n UNKNOWN - unknown or the reason is provided in OverrideReasonCustom.\\n PRICE_ZERO - Item came in with zero price and was overriden with a correct value.\\n PRICE_VERIFY - Item came in with incorrect price and was overriden with a correct value.\\n PRICE_MATCH - Item price was matched to a competitor's price.\\n WIC_WRITE_OFF - Maximum item price was mandated by a WIC (US regulation).\\n OTHER_WRITE_OFF - Write offs for other purposes.",
						"enum": [
							"UNKNOWN",
							"PRICE_ZERO",
							"PRICE_VERIFY",
							"PRICE_MATCH",
							"WIC_WRITE_OFF",
							"OTHER_WRITE_OFF"
						]
					},
					"overrideReasonCustom": {
						"type": "string",
						"description": "Custom reason for Override. When this is used, OverrideReason field should be set to Unknown."
					}
				},
				"description": "Override Information for the transaction."
			},
			"PartnerDetailsInfo": {
				"required": [
					"serviceProviderName",
					"serviceSubType",
					"serviceType"
				],
				"type": "object",
				"properties": {
					"serviceProviderName": {
						"maxLength": 250,
						"minLength": 3,
						"type": "string",
						"description": "The service provider name."
					},
					"serviceSubType": {
						"maxLength": 250,
						"minLength": 3,
						"type": "string",
						"description": "The service sub type."
					},
					"serviceType": {
						"maxLength": 250,
						"minLength": 3,
						"type": "string",
						"description": "The service type."
					}
				},
				"description": "The Class Partner details info."
			},
			"PassengerFlightSegment": {
				"required": [
					"bookingStatusCode",
					"checkInStatus",
					"classOfServiceCode",
					"dcsPassengerRefNumber",
					"dcsSequenceNumber",
					"eligibleForCheckin",
					"flightSegmentId",
					"onStandBy",
					"passengerId",
					"seatUpgraded"
				],
				"type": "object",
				"properties": {
					"bookingStatusCode": {
						"type": "string",
						"description": "The booking status code.",
						"enum": [
							"UNKNOWN",
							"CONFIRMED",
							"STANDBY",
							"CANCELLED",
							"FLOWN"
						]
					},
					"bpInhibitingSSrs": {
						"type": "array",
						"description": "The bp inhibiting s srs.",
						"items": {
							"type": "string",
							"description": "The bp inhibiting s srs."
						}
					},
					"checkInStatus": {
						"type": "string",
						"description": "The check-in status.",
						"enum": [
							"CHECKEDIN",
							"NOT_CHECKEDIN",
							"PARTIALLY_CHECKEDIN"
						]
					},
					"classOfServiceCode": {
						"type": "string",
						"description": "The class of service code.",
						"enum": [
							"ECONOMY",
							"PREMIUM_ECONOMY",
							"BUSINESS",
							"PREMIUM_BUSINESS",
							"FIRST",
							"PREMIUM_FIRST"
						]
					},
					"dcsPassengerRefNumber": {
						"maximum": 999,
						"minimum": 1,
						"type": "integer",
						"description": "The dcs passenger ref number.",
						"format": "int32"
					},
					"dcsSequenceNumber": {
						"maximum": 999,
						"minimum": 1,
						"type": "integer",
						"description": "The dcs sequence number.",
						"format": "int32"
					},
					"eligibleForCheckin": {
						"type": "boolean",
						"description": "The is eligible for check-in."
					},
					"flightSegmentId": {
						"pattern": "[0-9]{1,3}",
						"type": "string",
						"description": "The flight segment id."
					},
					"onStandBy": {
						"type": "boolean",
						"description": "The on standby."
					},
					"osis": {
						"type": "array",
						"description": "The osis.",
						"items": {
							"$ref": "#/components/schemas/OsiInfo"
						}
					},
					"passengerId": {
						"pattern": "[0-9]{1,3}",
						"type": "string",
						"description": "The passenger id."
					},
					"seat": {
						"$ref": "#/components/schemas/PassengerSeatInfo"
					},
					"seatUpgraded": {
						"type": "boolean",
						"description": "The seat upgraded."
					},
					"ssrs": {
						"type": "array",
						"description": "The ssrs.",
						"items": {
							"$ref": "#/components/schemas/SsrInfo"
						}
					}
				},
				"description": "The Class Passenger flight segment."
			},
			"PassengerInfo": {
				"required": [
					"apisStatus",
					"dateOfBirth",
					"firstName",
					"gender",
					"hasLapInfant",
					"hostId",
					"id",
					"lastName",
					"loyaltyPrograms",
					"nrps",
					"nrsa",
					"passengerType",
					"phoneNumbers",
					"premier",
					"tickets"
				],
				"type": "object",
				"properties": {
					"advancePassengerInfo": {
						"$ref": "#/components/schemas/AdvancePassengerInfo"
					},
					"ageInMonths": {
						"maximum": 24,
						"minimum": 0,
						"type": "integer",
						"description": "The age in months. true only when PassengerType is LAP_INFANT. Lap Infant should be between 0 to 24 months.",
						"format": "int32"
					},
					"apisStatus": {
						"type": "string",
						"description": "The apis status.",
						"enum": [
							"APIS_INCOMPLETE",
							"APIS_COMPLETE",
							"NOT_APIS_FLIGHT",
							"UN_KNOWN_APIS"
						]
					},
					"associatedPassengerId": {
						"type": "integer",
						"description": "The associated passenger id. Required when PassengerType is LAP_INFANT",
						"format": "int32"
					},
					"dateOfBirth": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"emailAddresses": {
						"type": "array",
						"description": "The email addresses.",
						"items": {
							"$ref": "#/components/schemas/EmailAddressInfo"
						}
					},
					"firstName": {
						"pattern": "[a-z,A-Z]{2,25}",
						"type": "string",
						"description": "The first name."
					},
					"gender": {
						"type": "string",
						"description": "The gender.",
						"enum": [
							"MALE",
							"FEMALE",
							"UNKNOWN"
						]
					},
					"hasLapInfant": {
						"type": "boolean",
						"description": "The has lap infant."
					},
					"hostId": {
						"pattern": "[0-9]{1,3}",
						"type": "string",
						"description": "The host id."
					},
					"id": {
						"pattern": "[0-9]{1,3}",
						"type": "string",
						"description": "The id."
					},
					"lastName": {
						"pattern": "[a-zA-Z ,.'-]{1,64}",
						"type": "string",
						"description": "The last name."
					},
					"loyaltyPrograms": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The loyalty programs.",
						"items": {
							"$ref": "#/components/schemas/TravelLoyaltyProgramInfo"
						}
					},
					"middleName": {
						"pattern": "[a-z,A-Z]{2,25}",
						"type": "string",
						"description": "The middle name."
					},
					"nrps": {
						"type": "boolean",
						"description": "The is nrps."
					},
					"nrsa": {
						"type": "boolean",
						"description": "The is nrsa."
					},
					"passengerType": {
						"type": "string",
						"description": "The passenger type.",
						"enum": [
							"SEATED_INFANT",
							"LAP_INFANT",
							"CHILD",
							"ADULT",
							"MILITARY",
							"JUMPSEAT",
							"YOUTH",
							"UNKNOWN"
						]
					},
					"phoneNumbers": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The phone numbers.",
						"items": {
							"$ref": "#/components/schemas/PhoneNumberInfo"
						}
					},
					"premier": {
						"type": "boolean",
						"description": "The is premier."
					},
					"tickets": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The tickets.",
						"items": {
							"$ref": "#/components/schemas/TicketInfo"
						}
					}
				},
				"description": "The Class Passenger info."
			},
			"PassengerSeatInfo": {
				"required": [
					"cabin",
					"characteristic",
					"rowNumber",
					"seatLetter",
					"status"
				],
				"type": "object",
				"properties": {
					"cabin": {
						"pattern": "[a-zA-Z]{1,50}",
						"type": "string",
						"description": "The cabin."
					},
					"characteristic": {
						"type": "string",
						"description": "The characteristics.",
						"enum": [
							"AISLE",
							"WINDOW",
							"BULKHEAD",
							"EXIT_ROW",
							"GALLEY",
							"LAVATORY",
							"UPPER_DECK"
						]
					},
					"needThruSeatInd": {
						"type": "boolean",
						"description": "The need thru seat ind."
					},
					"rowNumber": {
						"maximum": 999,
						"minimum": 1,
						"type": "integer",
						"description": "The row number.",
						"format": "int32"
					},
					"seatLetter": {
						"pattern": "[a-zA-Z]{1}",
						"type": "string",
						"description": "The seat letter."
					},
					"status": {
						"type": "string",
						"description": "The status.",
						"enum": [
							"UNKNOWN",
							"CONFIRMED",
							"REQUESTED",
							"STANDBY"
						]
					}
				},
				"description": "The Class Passenger seat info."
			},
			"PassportInfo": {
				"required": [
					"dateOfBirth",
					"expirationDate",
					"gender",
					"idocType",
					"nationality",
					"number",
					"placeOfIssue"
				],
				"type": "object",
				"properties": {
					"dateOfBirth": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"expirationDate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"gender": {
						"type": "string",
						"description": "The gender.",
						"enum": [
							"MALE",
							"FEMALE",
							"UNKNOWN"
						]
					},
					"idocType": {
						"type": "string",
						"description": "The idoc type.",
						"enum": [
							"UNKNOWN_DOCUMENT",
							"COUNTRY_OF_RESIDENCE",
							"PASSPORT",
							"RESIDENT_CARD",
							"REDRESS_NUMBER",
							"US_DESTINATION_ADDRESS",
							"EMERGENCY_CONTACT_INFORMATION",
							"VISA",
							"I94_FORM",
							"MILITARY_ID",
							"NATIONAL_IDENTITY_CARD",
							"ALIEN_REGISTRATION_NUMBER",
							"BORDER_CROSSING_CARD",
							"REFUGEE_TRAVEL_DOCUMENT",
							"PILOT_LICENSE",
							"KNOWN_TRAVELER_NUMBER",
							"NATURALIZATION_CERTIFICATE",
							"OTHER"
						]
					},
					"nationality": {
						"type": "string",
						"description": "The nationality."
					},
					"number": {
						"pattern": "[a-zA-Z0-9]{1,32}",
						"type": "string",
						"description": "The number."
					},
					"placeOfIssue": {
						"type": "string",
						"description": "The place of issue."
					}
				},
				"description": "The Class Passport info."
			},
			"PatientAcknowledgement": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the prompt the patient is presented with for acknowledgement."
					},
					"resultType": {
						"type": "string",
						"description": "Result of the patient's acknowledgement. No prompt means no prompt was required. Accepted means the patient chose to accept and sign. Cancelled means that the patient did not want to sign the prompt now. Declined means that the patient declined to sign the prompt ever.",
						"enum": [
							"NO_PROMPT",
							"ACCEPTED",
							"CANCELLED",
							"DECLINED"
						]
					}
				},
				"description": "List of required acknowledgement."
			},
			"PatientAcknowledgementsInfo": {
				"type": "object",
				"properties": {
					"acknowledgements": {
						"type": "array",
						"description": "List of required acknowledgment.",
						"items": {
							"$ref": "#/components/schemas/PatientAcknowledgement"
						}
					},
					"patientId": {
						"type": "string",
						"description": "Internal id of the patient."
					},
					"signature": {
						"type": "string",
						"description": "Patient's signature."
					},
					"signatureContentType": {
						"type": "string",
						"description": "Describes the type of the signature format."
					}
				},
				"description": "Information Related to the Patients Acknowledgements."
			},
			"PaymentProviderInfo": {
				"type": "object",
				"properties": {
					"epsName": {
						"type": "string",
						"description": "Name of the Electronic Payment System"
					},
					"epsReceiptData": {
						"type": "string",
						"description": "Response data retrieved from the EPS provider. This data is used to populate the receipt."
					},
					"epsTerminalId": {
						"type": "string",
						"description": "Id of the EPS terminal"
					},
					"responseCode": {
						"type": "string",
						"description": "Response code from the provider"
					},
					"traceId": {
						"type": "string",
						"description": "External identifier used for tracing funds for Electronic Payment Systems."
					}
				},
				"description": "Payment Provider information associated with transaction."
			},
			"PharmacyDetails": {
				"type": "object",
				"properties": {
					"patientAcknowledgements": {
						"type": "array",
						"description": "Information Related to the Patients Acknowledgements.",
						"items": {
							"$ref": "#/components/schemas/PatientAcknowledgementsInfo"
						}
					}
				},
				"description": "List of patient Acknowledgements for each patient in this transaction."
			},
			"PharmacyPromptDetails": {
				"type": "object",
				"properties": {
					"isSkippable": {
						"type": "boolean",
						"description": "Indicates if this prompt is skippable by the patient."
					},
					"name": {
						"type": "string",
						"description": "Name of the prompt the patient is presented with for acknowledgment."
					},
					"requiredPromptType": {
						"type": "string",
						"description": "Type of prompt required for this acknowledgment.",
						"enum": [
							"NO_PROMPT",
							"PROMPT",
							"PROMPT_SIGNATURE"
						]
					}
				},
				"description": "List of patient acknowledgments for this item together with their requirement status."
			},
			"PharmacyRejectedInfo": {
				"type": "object",
				"properties": {
					"rejectReason": {
						"type": "string",
						"description": "Reason for the rejection of the pharmacy item sale."
					}
				},
				"description": "Information about the rejection of the pharmacy item if happened."
			},
			"PhoneNumberInfo": {
				"required": [
					"number",
					"type"
				],
				"type": "object",
				"properties": {
					"number": {
						"pattern": "[0-9]{5,12}",
						"type": "string",
						"description": "The number."
					},
					"type": {
						"type": "string",
						"description": "The type.",
						"enum": [
							"HOME",
							"MOBILE",
							"WORK",
							"OTHER"
						]
					}
				},
				"description": "The Class Phone number info."
			},
			"PriceChangeInfo": {
				"type": "object",
				"properties": {
					"currency": {
						"$ref": "#/components/schemas/CurrencyInfo"
					},
					"effectiveDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"endDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"price": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"priceTier": {
						"type": "string",
						"description": "Sets the price for a product based on which tender was used.",
						"enum": [
							"UNKNOWN",
							"DEFAULT",
							"CASH",
							"CREDIT"
						]
					},
					"priceTierLabel": {
						"type": "string",
						"description": "Label field for UNKNOWN priceTier."
					},
					"serviceTier": {
						"type": "string",
						"description": "Sets the price for a product based on the level of service received.",
						"enum": [
							"UNKNOWN",
							"DEFAULT",
							"FULL_SERVICE",
							"SELF_SERVICE"
						]
					},
					"serviceTierLabel": {
						"type": "string",
						"description": "Label field for UNKNOWN serviceTier."
					},
					"source": {
						"type": "string",
						"description": "Source of the price change."
					},
					"unitOfMeasure": {
						"$ref": "#/components/schemas/QuantityInfo"
					}
				},
				"description": "Information about a particular price change."
			},
			"PriceChanges": {
				"type": "object",
				"properties": {
					"productPriceChanges": {
						"type": "array",
						"description": "List of product price changes.",
						"items": {
							"$ref": "#/components/schemas/ProductPriceChangeInfo"
						}
					}
				},
				"description": "Collection of price changes"
			},
			"ProductPriceChangeInfo": {
				"type": "object",
				"properties": {
					"prices": {
						"type": "array",
						"description": "List of price changes for a product.",
						"items": {
							"$ref": "#/components/schemas/PriceChangeInfo"
						}
					},
					"productId": {
						"type": "string",
						"description": "Id of the product for which the price is changing."
					}
				},
				"description": "Price changes for the products in the store or fuel at the pump."
			},
			"PromotionInfo": {
				"type": "object",
				"properties": {
					"amount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"couponId": {
						"type": "string",
						"description": "External identification of the coupon awarded, if applicable (reward_type = COUPON)"
					},
					"id": {
						"type": "string",
						"description": "Id of the promotion as understood by POS system. Unique within site."
					},
					"internalId": {
						"type": "string",
						"description": "Promotion internal id in the context of the transaction. Allows for identifying actual instance of the promotion."
					},
					"message": {
						"type": "string",
						"description": "Promotion message printed, if applicable."
					},
					"name": {
						"type": "string",
						"description": "Name of the promotion"
					},
					"percentage": {
						"type": "integer",
						"description": "Percentage the promotion is worth",
						"format": "int32"
					},
					"points": {
						"type": "integer",
						"description": "Loyalty points the promotion is worth, if applicable.",
						"format": "int32"
					},
					"rewardType": {
						"type": "string",
						"description": "The reward issued in the promotion e.g. discount, points, coupon etc.",
						"enum": [
							"LOYALTY",
							"LOYALTY_FUTURE",
							"MESSAGE",
							"COUPON"
						]
					}
				},
				"description": "Promotions / Campaigns issued with the transaction - both item level and transactions level. Promotion can only be applied in the future"
			},
			"ProviderData": {
				"required": [
					"gcpCloudFunctionsMetadata",
					"getParserPropertiesFunctionName",
					"getReceiptFunctionName",
					"parseFunctionName"
				],
				"type": "object",
				"properties": {
					"gcpCloudFunctionsMetadata": {
						"$ref": "#/components/schemas/GcpCloudFunctionsMetadata"
					},
					"getParserPropertiesFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the `getParserProperties` function for this provider."
					},
					"getReceiptFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the `getReceipt` function for this provider."
					},
					"parseFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the `parse` function for this provider."
					},
					"scrubFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the 'scrub' function for this provider"
					}
				},
				"description": "The provider data."
			},
			"ProviderViewData": {
				"required": [
					"gcpCloudFunctionsMetadata",
					"getParserPropertiesFunctionName",
					"getReceiptFunctionName",
					"parseFunctionName"
				],
				"type": "object",
				"properties": {
					"createdBy": {
						"type": "string",
						"description": "The user that created the provider."
					},
					"createdOn": {
						"type": "string",
						"description": "When the provider was created in zulu time.",
						"format": "date-time"
					},
					"gcpCloudFunctionsMetadata": {
						"$ref": "#/components/schemas/GcpCloudFunctionsMetadata"
					},
					"getParserPropertiesFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the `getParserProperties` function for this provider."
					},
					"getReceiptFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the `getReceipt` function for this provider."
					},
					"parseFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the `parse` function for this provider."
					},
					"providerName": {
						"type": "string",
						"description": "The name of the provider."
					},
					"providerVersion": {
						"type": "string",
						"description": "The version of the provider"
					},
					"scrubFunctionName": {
						"pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]*$",
						"type": "string",
						"description": "The name of the 'scrub' function for this provider"
					},
					"updatedBy": {
						"type": "string",
						"description": "The user that updated the provider."
					},
					"updatedOn": {
						"type": "string",
						"description": "When the provider was updated in zulu time.",
						"format": "date-time"
					}
				},
				"description": "The provider view data."
			},
			"PumpFuelReadingTransaction": {
				"required": [
					"pumpReadings"
				],
				"type": "object",
				"properties": {
					"fuelReadingType": {
						"type": "string",
						"description": "The type of reading/delivery this is, whether end of day, at a point in time, at price change, or during delivery",
						"enum": [
							"UNKNOWN",
							"END_OF_DAY",
							"PRICE_CHANGE",
							"DELIVERY",
							"POINT_READING"
						]
					},
					"pumpReadings": {
						"type": "array",
						"description": "List of Pump readings associated with this transaction.",
						"items": {
							"$ref": "#/components/schemas/PumpReading"
						}
					}
				},
				"description": "Pump Fuel Reading Transaction captures information related to Pump readings."
			},
			"PumpFuelTestTransaction": {
				"required": [
					"pumpTests"
				],
				"type": "object",
				"properties": {
					"pumpTests": {
						"type": "array",
						"description": "List of Pump Tests associated with this transaction.",
						"items": {
							"$ref": "#/components/schemas/PumpReading"
						}
					},
					"testType": {
						"type": "string",
						"description": "The type of pump test this is, whether a test with returning fuel to tank, test without returning fuel, or something else",
						"enum": [
							"UNKNOWN",
							"TANK_RETURN",
							"NO_TANK_RETURN"
						]
					}
				},
				"description": "Pump Fuel Test Transaction captures information related to Pump testing and calibrations."
			},
			"PumpReading": {
				"type": "object",
				"properties": {
					"dataSource": {
						"type": "string",
						"description": "Entry method for the Source of data",
						"enum": [
							"DEVICE",
							"CALCULATED",
							"OFFLINE",
							"MANUAL",
							"NOT_APPLICABLE"
						]
					},
					"feedstockId": {
						"type": "string",
						"description": "Feedstock id associated with the transaction"
					},
					"fuelMeterVolume": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"fuelShiftId": {
						"type": "string",
						"description": "Shift id associated with the fuel reading"
					},
					"fuelingPointId": {
						"type": "string",
						"description": "Fueling point/Pump number associated with the transaction"
					},
					"gradeId": {
						"type": "string",
						"description": "Grade/Tier number associated with the transaction"
					},
					"isEndOfShift": {
						"type": "boolean",
						"description": "Indicates if this reading happened at the end of the shift."
					},
					"nozzleId": {
						"type": "string",
						"description": "Nozzle/Hose number associated with the transaction"
					},
					"productId": {
						"type": "string",
						"description": "Fuel Product number information associated with the transaction"
					},
					"pumpReadingType": {
						"type": "string",
						"description": "Type of the event or reading associated with the transaction. Whether it's a delivery or reading.",
						"enum": [
							"UNKNOWN",
							"PUMP_READING",
							"FEEDSTOCK_READING",
							"PUMP_TEST"
						]
					},
					"readingDateTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"returnTankId": {
						"type": "string",
						"description": "Identifies the Fuel Tank where the fuel is returned after a reading or a test."
					},
					"tankId": {
						"type": "string",
						"description": "Tank id information associated with the transaction"
					},
					"unitPrice": {
						"$ref": "#/components/schemas/MoneyInfo"
					}
				},
				"description": "Pump Reading Information associated with Pump Fuel Reading Transaction."
			},
			"PurseInfo": {
				"type": "object",
				"properties": {
					"amountPaid": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"purseId": {
						"type": "string",
						"description": "Unique id of the purse."
					},
					"purseName": {
						"type": "string",
						"description": "Name/description of the purse."
					},
					"remainingBalance": {
						"$ref": "#/components/schemas/MoneyInfo"
					}
				},
				"description": "Contains information about the purse in the transaction."
			},
			"QuantitativeMoneyInfo": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "number",
						"description": "Value in Decimal Format - no spaces, decimal point is '.', negative number sign is '-' character."
					},
					"unitPriceQuantity": {
						"$ref": "#/components/schemas/QuantityInfo"
					}
				},
				"description": "Money information with number of items per unit price."
			},
			"QuantityInfo": {
				"type": "object",
				"properties": {
					"entryMethod": {
						"type": "string",
						"description": "Entry method of the item's quantity",
						"enum": [
							"KEYED",
							"INTEGRATED_CHIP_CARD",
							"MEASURED",
							"MICR",
							"MSR",
							"RFID",
							"SELF_SCAN",
							"SCANNED",
							"SMART_CARD",
							"TAPPED",
							"WAVED",
							"WEIGHED",
							"UNKNOWN",
							"AUTOMATIC"
						]
					},
					"entryMethodLabel": {
						"type": "string",
						"description": "Contains value for entry method if it's unknown"
					},
					"quantity": {
						"type": "number",
						"description": "Quantity"
					},
					"unitOfMeasurement": {
						"type": "string",
						"description": "Unit of measurement based on the enumeration.",
						"enum": [
							"NOT_KNOWN",
							"PIECE",
							"TON",
							"METRE",
							"INCH",
							"YARD",
							"GBGALLON",
							"GRAM",
							"CENTIMETRE",
							"SQUAREMETRE",
							"FOOT",
							"MILE",
							"SQUAREINCH",
							"SQUAREFOOT",
							"SQUAREMILE",
							"GBOUNCE",
							"USOUNCE",
							"GBPINT",
							"USPINT",
							"GBQUART",
							"USQUART",
							"USGALLON",
							"MILLIMETRE",
							"KILOMETRE",
							"SQUAREYARD",
							"ACRE",
							"ARE",
							"SQUAREMILLIMETRE",
							"SQUARECENTIMETRE",
							"HECTARE",
							"SQUAREKILOMETRE",
							"MILLILITRE",
							"CENTILITRE",
							"LITRE",
							"POUND",
							"BARRELS",
							"BILLIONCUBICFEET",
							"BOARDFEET",
							"BUSHELS",
							"CUBICMETERS",
							"KILOWATTHOURS",
							"ONEMILLIONBTU",
							"TROYOUNCES",
							"FAHRENHEIT",
							"CELSIUS",
							"KILOGRAM"
						]
					},
					"unitOfMeasurementLabel": {
						"type": "string",
						"description": "Label for Unit of Measurement"
					}
				},
				"description": "Quantity information associated with transaction."
			},
			"RawTLogData": {
				"type": "object",
				"properties": {
					"rawTLog": {
						"pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
						"type": "string",
						"description": "The base64 encoded raw tlog"
					}
				},
				"description": "The object containing the raw tlog"
			},
			"ReceiptDeliveryInfo": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"description": "Contains email address for receipt delivery if customer elected to have receipt delivered by email."
					},
					"isEmail": {
						"type": "boolean",
						"description": "Indicates if the customer wishes to receive receipt by email."
					},
					"isPrinter": {
						"type": "boolean",
						"description": "Customer wishes to have receipt printed."
					},
					"isSms": {
						"type": "boolean",
						"description": "Indicates if the customer wishes to receive receipt by sms."
					},
					"sms": {
						"type": "string",
						"description": "Contains sms number for receipt delivery if customer elected to have receipt delivered by sms."
					}
				},
				"description": "Describes the customer's receipt delivery preferences."
			},
			"ReceiptInfo": {
				"required": [
					"contentType"
				],
				"type": "object",
				"properties": {
					"contentType": {
						"type": "string",
						"description": "Media type of the receipt info."
					},
					"encodingMethod": {
						"type": "string",
						"description": "Encoding method used on receipt data",
						"enum": [
							"base64",
							"xml",
							"json"
						]
					},
					"receiptData": {
						"type": "string",
						"description": "Actual receipt data. Expected to be base64, xml, or json encoded."
					}
				},
				"description": "Receipt information associated with transaction."
			},
			"RedressNumberInfo": {
				"required": [
					"idocType",
					"number"
				],
				"type": "object",
				"properties": {
					"idocType": {
						"type": "string",
						"description": "The idoc type.",
						"enum": [
							"UNKNOWN_DOCUMENT",
							"COUNTRY_OF_RESIDENCE",
							"PASSPORT",
							"RESIDENT_CARD",
							"REDRESS_NUMBER",
							"US_DESTINATION_ADDRESS",
							"EMERGENCY_CONTACT_INFORMATION",
							"VISA",
							"I94_FORM",
							"MILITARY_ID",
							"NATIONAL_IDENTITY_CARD",
							"ALIEN_REGISTRATION_NUMBER",
							"BORDER_CROSSING_CARD",
							"REFUGEE_TRAVEL_DOCUMENT",
							"PILOT_LICENSE",
							"KNOWN_TRAVELER_NUMBER",
							"NATURALIZATION_CERTIFICATE",
							"OTHER"
						]
					},
					"number": {
						"pattern": "[0-9]{7}",
						"type": "string",
						"description": "The number."
					}
				},
				"description": "The Class Redress number info."
			},
			"RefusalInfo": {
				"type": "object",
				"properties": {
					"refusalType": {
						"type": "string",
						"description": "Reason for the refusal",
						"enum": [
							"AGE_RESTRICTION",
							"DESTINATION_RESTRICTION",
							"PRODUCT_STOP",
							"QUANTITY_RESTRICTED",
							"TIME_RESTRICTED",
							"BRM",
							"UNKNOWN"
						]
					},
					"refusalTypeLabel": {
						"type": "string",
						"description": "The refusal reason in the case of an unknown refusalType. The refusalType field must be present to use this field"
					}
				},
				"description": "Refusal information for a refused sale of an item"
			},
			"ReservationInfo": {
				"required": [
					"flightSegments",
					"hostAirlineCode",
					"passengerFlightSegments",
					"passengers",
					"pnr",
					"reservationType"
				],
				"type": "object",
				"properties": {
					"bags": {
						"type": "array",
						"description": "The bags",
						"items": {
							"$ref": "#/components/schemas/BagInfo"
						}
					},
					"flightSegments": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The flight segments.",
						"items": {
							"$ref": "#/components/schemas/FlightSegmentInfo"
						}
					},
					"hostAirlineCode": {
						"pattern": "[a-zA-Z0-9]{2}",
						"type": "string",
						"description": "The host airline code."
					},
					"passengerFlightSegments": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The passenger flight segments.",
						"items": {
							"$ref": "#/components/schemas/PassengerFlightSegment"
						}
					},
					"passengers": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The passengers.",
						"items": {
							"$ref": "#/components/schemas/PassengerInfo"
						}
					},
					"pnr": {
						"pattern": "[a-zA-Z0-9]{6}",
						"type": "string",
						"description": "The pnr."
					},
					"remarks": {
						"type": "array",
						"description": "The remarks.",
						"items": {
							"type": "string",
							"description": "The remarks."
						}
					},
					"reservationType": {
						"type": "string",
						"description": "The reservation type.",
						"enum": [
							"UNKNOWN",
							"REGULAR",
							"GROUP",
							"CONVENTION",
							"NON_REVENUE_SPACE_AVAILABLE",
							"NON_REVENUE_POSITIVE_SPACE",
							"PROMOTIONAL",
							"CREW",
							"CORPORATE"
						]
					}
				},
				"description": "The Class Reservation info."
			},
			"ResidentCardInfo": {
				"required": [
					"expirationDate",
					"firstName",
					"idocType",
					"issuerCode",
					"lastName",
					"residentCardNumber"
				],
				"type": "object",
				"properties": {
					"expirationDate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"firstName": {
						"pattern": "[a-zA-Z0-9]{1,35}",
						"type": "string",
						"description": "The first name."
					},
					"idocType": {
						"type": "string",
						"description": "The idoc type.",
						"enum": [
							"UNKNOWN_DOCUMENT",
							"COUNTRY_OF_RESIDENCE",
							"PASSPORT",
							"RESIDENT_CARD",
							"REDRESS_NUMBER",
							"US_DESTINATION_ADDRESS",
							"EMERGENCY_CONTACT_INFORMATION",
							"VISA",
							"I94_FORM",
							"MILITARY_ID",
							"NATIONAL_IDENTITY_CARD",
							"ALIEN_REGISTRATION_NUMBER",
							"BORDER_CROSSING_CARD",
							"REFUGEE_TRAVEL_DOCUMENT",
							"PILOT_LICENSE",
							"KNOWN_TRAVELER_NUMBER",
							"NATURALIZATION_CERTIFICATE",
							"OTHER"
						]
					},
					"issuerCode": {
						"type": "string",
						"description": "The issuer code."
					},
					"lastName": {
						"pattern": "[a-zA-Z0-9]{1,35}",
						"type": "string",
						"description": "The last name."
					},
					"residentCardNumber": {
						"pattern": "[a-zA-Z0-9]{1,32}",
						"type": "string",
						"description": "The resident card number."
					}
				},
				"description": "The Class Resident card info."
			},
			"ResourceAlreadyExistsException": {
				"type": "object",
				"properties": {
					"businessMessage": {
						"type": "string"
					},
					"details": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"errorType": {
						"type": "string"
					}
				}
			},
			"ResourceDoesNotExistException": {
				"type": "object",
				"properties": {
					"businessMessage": {
						"type": "string"
					},
					"details": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"errorType": {
						"type": "string"
					}
				}
			},
			"RevenueCenterInfo": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The ID of the revenue center. Unique across site."
					},
					"name": {
						"type": "string",
						"description": "Name of the revenue center"
					}
				},
				"description": "Revenue center allows some POSes sell for different prices than others."
			},
			"SaveCanonicalTLogDataRequest": {
				"required": [
					"tlogData"
				],
				"type": "object",
				"properties": {
					"tlogData": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "List of one or more CanonicalTLogData",
						"items": {
							"$ref": "#/components/schemas/CanonicalTLogData"
						}
					}
				},
				"description": "SaveCanonicalTLogDataRequest contains a collection of one or more CanonicalTLogData objects to be saved"
			},
			"SaveRawTLogDataRequest": {
				"required": [
					"rawTLogs"
				],
				"type": "object",
				"properties": {
					"rawTLogs": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "List of one or more RawTLogData",
						"items": {
							"$ref": "#/components/schemas/RawTLogData"
						}
					}
				},
				"description": "SaveRawTLogDataRequest contains a collection of one or more RawTLogData objects to be saved"
			},
			"SiteInfo": {
				"required": [
					"id"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Site identification as known by customer. Unique within one tenant."
					},
					"name": {
						"type": "string",
						"description": "The name of the site in which the transaction was performed."
					},
					"referenceId": {
						"type": "string",
						"description": "Additional site identification as required by customer."
					},
					"siteTimeZone": {
						"$ref": "#/components/schemas/TimeZoneInfo"
					}
				},
				"description": "Site Information associated with the Transaction."
			},
			"SsrInfo": {
				"required": [
					"airline",
					"number",
					"ssrCode",
					"status",
					"text"
				],
				"type": "object",
				"properties": {
					"airline": {
						"$ref": "#/components/schemas/AirlineInfo"
					},
					"contentText": {
						"type": "string",
						"description": "The content text."
					},
					"number": {
						"maximum": 99,
						"minimum": 1,
						"type": "integer",
						"description": "The number.",
						"format": "int32"
					},
					"serviceQuantity": {
						"type": "integer",
						"description": "The service quantity.",
						"format": "int32"
					},
					"ssrCode": {
						"type": "string",
						"description": "The ssr code.",
						"enum": [
							"PETC",
							"BBML",
							"SVAN",
							"DEPU"
						]
					},
					"status": {
						"type": "string",
						"description": "The status."
					},
					"statusCode": {
						"type": "string",
						"description": "The status code."
					},
					"text": {
						"type": "string",
						"description": "The text."
					}
				},
				"description": "The Class Ssr info."
			},
			"StoredValueInfo": {
				"type": "object",
				"properties": {
					"currentBalance": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"declineCode": {
						"type": "string",
						"description": "Decline code for the transaction."
					},
					"declineReason": {
						"type": "string",
						"description": "Decline reason for the transaction."
					},
					"maskedCardNumber": {
						"type": "string",
						"description": "Card number that holds the stored value for the customer."
					},
					"purses": {
						"type": "array",
						"description": "List of purses associated with the stored value.",
						"items": {
							"$ref": "#/components/schemas/PurseInfo"
						}
					},
					"storedValueAuthorization": {
						"$ref": "#/components/schemas/TenderAuthorizationInfo"
					},
					"storedValueId": {
						"type": "string",
						"description": "External identifier that holds the stored value for the customer."
					}
				},
				"description": "Information associated with the stored value."
			},
			"StoredValueTransaction": {
				"type": "object",
				"properties": {
					"employees": {
						"type": "array",
						"description": "List of employees who participated on the transaction.",
						"items": {
							"$ref": "#/components/schemas/EmployeeInfo"
						}
					},
					"receiptId": {
						"type": "string",
						"description": "Identification of the transaction/receipt as presented to the customer (shown or printed on the receipt)."
					},
					"receiptInfo": {
						"$ref": "#/components/schemas/ReceiptInfo"
					},
					"storedValueInfo": {
						"$ref": "#/components/schemas/StoredValueInfo"
					},
					"transactionType": {
						"type": "string",
						"description": "Type of Stored Value Transaction.",
						"enum": [
							"UNKNOWN",
							"BALANCE_INQUIRY"
						]
					},
					"transactionTypeLabel": {
						"type": "string",
						"description": "This label is used to define the transaction type if it's UNKNOWN or it's used to further elaborate on selected type."
					}
				},
				"description": "Stored Value Transaction Information associated with the Transaction."
			},
			"SurchargeInfo": {
				"type": "object",
				"properties": {
					"amount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"amountUncollected": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"id": {
						"type": "string",
						"description": "Surcharge identification. Unique within site."
					},
					"isAutoApplied": {
						"type": "boolean",
						"description": "True if the surcharge has been applied automatically"
					},
					"isRefund": {
						"type": "boolean",
						"description": "True if the surcharge is refunded to the customer"
					},
					"isVoided": {
						"type": "boolean",
						"description": "True if surcharge was voided"
					},
					"name": {
						"type": "string",
						"description": "Name of the surcharge"
					},
					"surchargePriceType": {
						"type": "string",
						"description": "Surcharge can be included in the item price / tender amount / transaction amount or excluded.",
						"enum": [
							"SURCHARGE_EXCLUDED_FROM_PRICE",
							"SURCHARGE_INCLUDED_IN_PRICE"
						]
					},
					"surchargeTaxes": {
						"type": "array",
						"description": "Taxes applied on the surcharge",
						"items": {
							"$ref": "#/components/schemas/TaxInfo"
						}
					},
					"surchargeType": {
						"type": "string",
						"description": "Type of the surcharge.",
						"enum": [
							"OTHER",
							"ORDER_MODE",
							"ITEM",
							"MODIFIED",
							"TENDER",
							"DELIVERY",
							"DISCOUNT",
							"GRATUITY",
							"ECO_FEE",
							"SHIPPING",
							"RESTOCK_FEE",
							"MANDATORY_FEE",
							"CUSTOM",
							"SERVICE_FEE"
						]
					},
					"surchargeTypeLabel": {
						"type": "string",
						"description": "Used for values not in the surchargeType enum. You must specify the surchargeType field to use this field."
					},
					"voidInfo": {
						"$ref": "#/components/schemas/VoidInfo"
					}
				},
				"description": "Surcharge Information related to the Transaction."
			},
			"TLogCountResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"description": "Count for the search criteria",
						"format": "int64"
					}
				},
				"description": "Response object to tell count of TLogs for search criteria."
			},
			"TLogInfo": {
				"type": "object",
				"properties": {
					"businessDayUtc": {
						"type": "string",
						"description": "Business day the transaction. For this field, the required format is 'YYYY-MM-DDThh:mm:ssZ",
						"format": "date-time"
					},
					"closeDateTimeUtc": {
						"type": "string",
						"description": "Time when the transaction has been closed in UTC.",
						"format": "date-time"
					},
					"destinationAccount": {
						"type": "string",
						"description": "Identification of the related entity. Dependent on the account type related to Cash Management Destination Id."
					},
					"employeeIds": {
						"type": "array",
						"description": "Employee Id's based on the transaction category for the transaction.",
						"items": {
							"type": "string",
							"description": "Employee Id's based on the transaction category for the transaction."
						}
					},
					"employeeNames": {
						"type": "array",
						"description": "Employee Name's based on the transaction category for the transaction.",
						"items": {
							"type": "string",
							"description": "Employee Name's based on the transaction category for the transaction."
						}
					},
					"endTransactionDateTimeUtc": {
						"type": "string",
						"description": "Deprecated: Use closeDateTimeUtc. Time when the transaction has been closed in UTC.",
						"format": "date-time",
						"deprecated": true
					},
					"fuelingPointId": {
						"type": "array",
						"description": "Fueling point/Pump number associated with the transaction",
						"items": {
							"type": "string",
							"description": "Fueling point/Pump number associated with the transaction"
						}
					},
					"grandAmount": {
						"type": "number",
						"description": "Information on totals related to Grand Amount",
						"format": "double"
					},
					"isSuspended": {
						"type": "boolean",
						"description": "Flag if the transaction is suspended. Default to false if field does not exist in transaction categories"
					},
					"isTrainingMode": {
						"type": "boolean",
						"description": "Flag indicating training mode."
					},
					"isVoided": {
						"type": "boolean",
						"description": "Flag if the transaction is voided."
					},
					"itemCount": {
						"type": "integer",
						"description": "The number of items in this tlog. If this transactionCategory doesn't support items this will be set to 0.",
						"format": "int32"
					},
					"receivedDateTimeUtc": {
						"type": "string",
						"description": "Time when the transaction was received in UTC.",
						"format": "date-time"
					},
					"siteInfoId": {
						"type": "string",
						"description": "Site identification as known by customer. Unique within one tenant."
					},
					"sourceAccount": {
						"type": "string",
						"description": "Identification of the related entity. Dependent on the account type related to Cash Management Source Id."
					},
					"tlogId": {
						"type": "string",
						"description": "Primary unique identification of the transaction"
					},
					"touchPointId": {
						"type": "string",
						"description": "The ID of the last terminal / touch point / POS id where the transaction occurred. Unique within the site."
					},
					"transactionCategory": {
						"type": "string",
						"description": "The category of the transaction: Sale or return, control, cash office or unknown.",
						"enum": [
							"SALE_OR_RETURN",
							"CONTROL",
							"CASH_OFFICE",
							"APEX_TRANSACTION",
							"TANK_FUEL_READING_TRANSACTION",
							"PUMP_FUEL_READING_TRANSACTION",
							"FUEL_DELIVERY_TRANSACTION"
						]
					},
					"transactionNumber": {
						"type": "string",
						"description": "Transaction number based on POS."
					},
					"transactionType": {
						"type": "string",
						"description": "The type of the transaction.",
						"enum": [
							"SALES",
							"RETURN",
							"SIGN_ON",
							"SIGN_OFF",
							"START_OF_DAY",
							"INVALID_PASSWORD",
							"CHANGE_PASSWORD",
							"RESET_PASSWORD",
							"TERMINAL_LOCK",
							"TERMINAL_UNLOCK",
							"DRAWER_OPEN",
							"END_OF_DAY",
							"TERMINAL_UP",
							"TERMINAL_DOWN",
							"SECURITY_ID_ENABLED",
							"SECURITY_ID_DISABLED",
							"DRAWER_ASSIGNMENT",
							"DRAWER_RETURN",
							"CONFIRMATION",
							"COUNT",
							"OPEN_LOAN",
							"ADD_LOAN",
							"SAFE_DROP",
							"PAY_IN",
							"PAY_OUT",
							"BANK_DEPOSIT",
							"BANK_RECEIPT",
							"TRANSFER",
							"PRICE_CHANGE",
							"UNKNOWN",
							"BLIND_PICKUP",
							"TENDER_EXCHANGE",
							"BLIND_PICKUP_REQUEST"
						]
					}
				},
				"description": "Object representing the transaction log information."
			},
			"TLogVersionViewData": {
				"type": "object",
				"properties": {
					"transactionVersion": {
						"type": "integer",
						"description": "Revision version of the transaction. Used in cases the transaction is updated.",
						"format": "int64"
					}
				},
				"description": "The object containing information about the version of the transaction"
			},
			"TankDelivery": {
				"type": "object",
				"properties": {
					"deliveryEnd": {
						"$ref": "#/components/schemas/TankDeliveryReading"
					},
					"deliveryReference": {
						"type": "string",
						"description": "Delivery reference"
					},
					"deliveryStart": {
						"$ref": "#/components/schemas/TankDeliveryReading"
					},
					"deliveryType": {
						"type": "string",
						"description": "Type of fuel delivery",
						"enum": [
							"UNKNOWN",
							"DEVICE",
							"OFFLINE",
							"MANUAL"
						]
					},
					"gradeId": {
						"type": "string",
						"description": "Grade/Tier number of fuel associated with the delivery"
					},
					"grossVolume": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"netVolume": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"productId": {
						"type": "string",
						"description": "Fuel Product number information associated with the delivery"
					},
					"tankId": {
						"type": "string",
						"description": "Tank id information associated with the transaction"
					},
					"unitPrice": {
						"$ref": "#/components/schemas/MoneyInfo"
					}
				},
				"description": "Tank Delivery Information associated with Tank Delivery Transaction."
			},
			"TankDeliveryReading": {
				"type": "object",
				"properties": {
					"correctedFuelVolume": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"dataSource": {
						"type": "string",
						"description": "Entry method for the Source of data",
						"enum": [
							"DEVICE",
							"CALCULATED",
							"OFFLINE",
							"MANUAL",
							"NOT_APPLICABLE"
						]
					},
					"density": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"fuelLevel": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"fuelShiftId": {
						"type": "string",
						"description": "Shift id associated with the fuel reading"
					},
					"fuelVolume": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"fuelWeight": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"gradeId": {
						"type": "string",
						"description": "Grade/Tier number associated with the transaction",
						"deprecated": true
					},
					"isEndOfShift": {
						"type": "boolean",
						"description": "Indicates if this reading happened at the end of the shift."
					},
					"productId": {
						"type": "string",
						"description": "Fuel Product number information associated with the transaction",
						"deprecated": true
					},
					"readingDateTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"tankId": {
						"type": "string",
						"description": "Tank id information associated with the transaction",
						"deprecated": true
					},
					"tankReadingType": {
						"type": "string",
						"description": "Type of the event or reading associated with the transaction. Whether it's a delivery or reading.",
						"deprecated": true,
						"enum": [
							"UNKNOWN",
							"START_OF_DELIVERY",
							"END_OF_DELIVERY",
							"TANK_READING"
						]
					},
					"temperature": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"ullage": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"unitPrice": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"waterLevel": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"waterVolume": {
						"$ref": "#/components/schemas/QuantityInfo"
					}
				},
				"description": "End of delivery tank reading"
			},
			"TankFuelReadingTransaction": {
				"required": [
					"tankReadings"
				],
				"type": "object",
				"properties": {
					"fuelReadingType": {
						"type": "string",
						"description": "The type of reading/delivery this is, whether end of day, at a point in time, at price change, or during delivery",
						"enum": [
							"UNKNOWN",
							"END_OF_DAY",
							"PRICE_CHANGE",
							"DELIVERY",
							"POINT_READING"
						]
					},
					"tankReadings": {
						"type": "array",
						"description": "List of Tank readings associated with this transaction.",
						"items": {
							"$ref": "#/components/schemas/TankReading"
						}
					}
				},
				"description": "Tank Fuel Reading Transaction captures information related to Tank readings."
			},
			"TankReading": {
				"type": "object",
				"properties": {
					"correctedFuelVolume": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"dataSource": {
						"type": "string",
						"description": "Entry method for the Source of data",
						"enum": [
							"DEVICE",
							"CALCULATED",
							"OFFLINE",
							"MANUAL",
							"NOT_APPLICABLE"
						]
					},
					"density": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"fuelLevel": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"fuelShiftId": {
						"type": "string",
						"description": "Shift id associated with the fuel reading"
					},
					"fuelVolume": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"fuelWeight": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"gradeId": {
						"type": "string",
						"description": "Grade/Tier number associated with the transaction"
					},
					"isEndOfShift": {
						"type": "boolean",
						"description": "Indicates if this reading happened at the end of the shift."
					},
					"productId": {
						"type": "string",
						"description": "Fuel Product number information associated with the transaction"
					},
					"readingDateTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"tankId": {
						"type": "string",
						"description": "Tank id information associated with the transaction"
					},
					"tankReadingType": {
						"type": "string",
						"description": "Type of the event or reading associated with the transaction. Whether it's a delivery or reading.",
						"enum": [
							"UNKNOWN",
							"START_OF_DELIVERY",
							"END_OF_DELIVERY",
							"TANK_READING"
						]
					},
					"temperature": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"ullage": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"unitPrice": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"waterLevel": {
						"$ref": "#/components/schemas/QuantityInfo"
					},
					"waterVolume": {
						"$ref": "#/components/schemas/QuantityInfo"
					}
				},
				"description": "Tank Reading Information associated with Tank Fuel Reading Transaction."
			},
			"TaxExemptInfo": {
				"type": "object",
				"properties": {
					"exemptAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"exemptHolderId": {
						"type": "string",
						"description": "External id of the subject who is tax exempted."
					},
					"exemptHolderName": {
						"type": "string",
						"description": "Name of the subject who is tax exempted."
					},
					"exemptTaxableAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"isTenderExempt": {
						"type": "boolean",
						"description": "Flag to dictate if the tax exemption was triggered based on a tender payment."
					},
					"reasonCode": {
						"type": "string",
						"description": "Reason for the tax exemption."
					}
				},
				"description": "Tax Exempt - some groups of people can be exempted from paying a specific tax."
			},
			"TaxInfo": {
				"type": "object",
				"properties": {
					"amount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"id": {
						"type": "string",
						"description": "Tax Identification. Unique across site."
					},
					"isRefund": {
						"type": "boolean",
						"description": "True if the tax is refunded to the customer."
					},
					"isVoided": {
						"type": "boolean",
						"description": "Indicates whether the tax has been voided"
					},
					"name": {
						"type": "string",
						"description": "Name of the tax"
					},
					"sequenceNumber": {
						"type": "string",
						"description": "Sequence number that is used to internally enumerate taxes in the transaction."
					},
					"taxAuthority": {
						"type": "string",
						"description": "Entity on whose behalf the tax is collected."
					},
					"taxAuthorityDescription": {
						"type": "string",
						"description": "Description of the entity on whose behalf the tax is collected."
					},
					"taxExempt": {
						"$ref": "#/components/schemas/TaxExemptInfo"
					},
					"taxPercent": {
						"type": "number",
						"description": "Tax's percentage value"
					},
					"taxSaleTypeCode": {
						"type": "string",
						"description": "Sale Tax Type Code e.g., SALES, REFUND, UNKNOWN.",
						"enum": [
							"SALE",
							"REFUND",
							"UNKNOWN"
						]
					},
					"taxSaleTypeCodeLabel": {
						"type": "string",
						"description": "Used for values not in the taxSaleTypeCode enum. You must specify the taxSaleTypeCode field to use this field."
					},
					"taxType": {
						"type": "string",
						"description": "Type of the tax e.g. inclusive, exclusive.",
						"enum": [
							"TAX_INCLUSIVE",
							"TAX_EXCLUSIVE",
							"VENDOR",
							"UNKNOWN"
						]
					},
					"taxTypeCode": {
						"type": "string",
						"description": "Type of the tax e.g. sales, VAT etc.",
						"enum": [
							"SALES",
							"VAT",
							"GST",
							"PST",
							"HST",
							"EXCISE",
							"USE_TAX",
							"UNKNOWN"
						]
					},
					"taxTypeCodeLabel": {
						"type": "string",
						"description": "Used for values not in the taxTypeCode enum. You must specify the taxTypeCode field to use this field."
					},
					"taxTypeLabel": {
						"type": "string",
						"description": "Used for values not in the taxType enum. You must specify the taxType field to use this field."
					},
					"taxableAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					}
				},
				"description": "Information on taxes."
			},
			"TdmSubscriptionBasicViewData": {
				"required": [
					"description",
					"name",
					"subscriptionType",
					"topicId"
				],
				"type": "object",
				"properties": {
					"description": {
						"type": "string"
					},
					"enterpriseUnitId": {
						"type": "string"
					},
					"name": {
						"maxLength": 200,
						"minLength": 1,
						"pattern": "\\p{Alpha}[\\w-]*",
						"type": "string"
					},
					"subscriptionType": {
						"type": "string",
						"enum": [
							"SERVICE",
							"URL",
							"KAFKA"
						]
					},
					"topicId": {
						"$ref": "#/components/schemas/TopicIdData"
					}
				}
			},
			"TdmSubscriptionViewData": {
				"required": [
					"description",
					"endpoint",
					"name",
					"topicId"
				],
				"type": "object",
				"properties": {
					"description": {
						"type": "string"
					},
					"endpoint": {
						"$ref": "#/components/schemas/UrlEndpointData"
					},
					"enterpriseUnitId": {
						"type": "string"
					},
					"messageAttributePatterns": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/KeyValueData"
						}
					},
					"name": {
						"maxLength": 200,
						"minLength": 1,
						"pattern": "\\p{Alpha}[\\w-]*",
						"type": "string"
					},
					"payloadDelivered": {
						"type": "boolean"
					},
					"topicId": {
						"$ref": "#/components/schemas/TopicIdData"
					}
				},
				"description": "View data of TDM subscriptions"
			},
			"TdmTopicIdData": {
				"required": [
					"name"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "TDM subscription topics",
						"enum": [
							"tlog_ext_received",
							"tdm_error_v2"
						]
					}
				},
				"description": "The unique ID of a topic"
			},
			"TenderAuthorizationInfo": {
				"type": "object",
				"properties": {
					"authorizationCodeNumber": {
						"type": "string",
						"description": "Authorization Code of Payment Provider"
					},
					"authorizationDateTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"authorizationType": {
						"type": "string",
						"description": "Type of authorization. Ex. Online"
					},
					"cardTypeId": {
						"type": "string",
						"description": "Identifier of the type of the card"
					},
					"electronicCheckConversion": {
						"$ref": "#/components/schemas/ElectronicCheckConversionInfo"
					},
					"isElectronicSignature": {
						"type": "boolean",
						"description": "Denotes whether the signature is electronic"
					},
					"isSignatureRequired": {
						"type": "boolean",
						"description": "Denotes whether the signature is required"
					},
					"isVerifiedByPIN": {
						"type": "boolean",
						"description": "Used with Chip + Pin.  A flag denoting that this TenderAuthorization was verified by customer entering PIN rather than signature"
					},
					"originalCardTypeId": {
						"type": "string",
						"description": "Contains the original cardTypeId entered by the customer that was later changed or corrected by the payment provider."
					},
					"paymentProvider": {
						"$ref": "#/components/schemas/PaymentProviderInfo"
					},
					"referenceNumber": {
						"type": "string",
						"description": "Reference number of the Transaction"
					},
					"requestedAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"signature": {
						"type": "string",
						"description": "Customer's receipt signature."
					},
					"signatureContentType": {
						"type": "string",
						"description": "Describes the type of the signature format."
					}
				},
				"description": "Tender Authorization Information associated with a Tender"
			},
			"TenderBenefitInfo": {
				"type": "object",
				"properties": {
					"eligibleItems": {
						"type": "array",
						"description": "List of items in which benefits were received for the tender payment",
						"items": {
							"$ref": "#/components/schemas/EligibleItemInfo"
						}
					}
				},
				"description": "Information to track benefits received from a tender payment"
			},
			"TenderBucketInfo": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"description": "Number of coins, bank notes, etc.",
						"format": "int32"
					},
					"denominationValue": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"name": {
						"type": "string",
						"description": "Name or description of the denomination."
					}
				},
				"description": "Tender Bucket Information for particular groups."
			},
			"TenderInfo": {
				"type": "object",
				"properties": {
					"authorizationCode": {
						"type": "string",
						"description": "The authorization code for processed payments.",
						"enum": [
							"APPROVE",
							"DECLINE",
							"UNKNOWN"
						]
					},
					"authorizationCodeLabel": {
						"type": "string",
						"description": "Used for values not in the authorizationCode enum. You must specify the authorizationCode field to use this field."
					},
					"authorizationResponseTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"cardLastFourDigits": {
						"type": "string",
						"description": "Last 4 digits of the payment card if applicable. Format 'abcd'"
					},
					"cashDrawerId": {
						"type": "string",
						"description": "Identification of the cash drawer used with this tender."
					},
					"checkInfo": {
						"$ref": "#/components/schemas/CheckInfo"
					},
					"couponId": {
						"type": "string",
						"description": "Links a tender to it's coupon in cases where coupon is used as tender"
					},
					"currency": {
						"$ref": "#/components/schemas/CurrencyInfo"
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"customerPaymentId": {
						"type": "string",
						"description": "Unique Identifier for the customer's tender"
					},
					"customerProgramId": {
						"type": "string",
						"description": "Id of the customer's program if it was used"
					},
					"employee": {
						"$ref": "#/components/schemas/EmployeeInfo"
					},
					"ewic": {
						"$ref": "#/components/schemas/TenderWICInfo"
					},
					"exchangeRate": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"id": {
						"type": "string",
						"description": "The ID of the tender used to pay for the transaction. External id of the tender."
					},
					"isRefused": {
						"type": "boolean",
						"description": "True in case the tender is refused"
					},
					"isVoided": {
						"type": "boolean",
						"description": "True if the tender was voided"
					},
					"lineNumber": {
						"type": "integer",
						"description": "Includes sequence number of LineItem.",
						"format": "int32"
					},
					"maskedCardNumber": {
						"type": "string",
						"description": "Masked number of the card. Usually first 6 and last 4 digits"
					},
					"name": {
						"type": "string",
						"description": "The name of the tender used to pay for the transaction."
					},
					"nameOnCard": {
						"type": "string",
						"description": "Name of the cardholder as it appears on the card"
					},
					"operatorBypassApprovals": {
						"type": "array",
						"description": "List of information regarding operator bypass approvals for given tender.",
						"items": {
							"$ref": "#/components/schemas/OperatorBypassApprovalInfo"
						}
					},
					"originalAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"originalCurrency": {
						"$ref": "#/components/schemas/CurrencyInfo"
					},
					"originalTenderInfo": {
						"$ref": "#/components/schemas/OriginalTenderInfo"
					},
					"overpaymentAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"promotionId": {
						"type": "string",
						"description": "Id of the promotion if it was used"
					},
					"purses": {
						"type": "array",
						"description": "List of purses associated with the tender.",
						"items": {
							"$ref": "#/components/schemas/PurseInfo"
						}
					},
					"referenceId": {
						"type": "string",
						"description": "Additional id for the tender"
					},
					"refusalInfo": {
						"$ref": "#/components/schemas/RefusalInfo"
					},
					"smartWIC": {
						"$ref": "#/components/schemas/TenderWICInfo"
					},
					"surcharges": {
						"type": "array",
						"description": "List of surcharges customer has paid because of using the tender.",
						"items": {
							"$ref": "#/components/schemas/SurchargeInfo"
						}
					},
					"tenderAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"tenderAuthorization": {
						"$ref": "#/components/schemas/TenderAuthorizationInfo"
					},
					"tenderBenefitInfo": {
						"$ref": "#/components/schemas/TenderBenefitInfo"
					},
					"tenderEndDateTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"tenderLink": {
						"type": "integer",
						"description": "Includes LineNumber of linked tender",
						"format": "int32"
					},
					"tenderRewardId": {
						"type": "string",
						"description": "Links a tender to it's tender reward"
					},
					"tipAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"tipReductionAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"type": {
						"type": "string",
						"description": "The type of the tender used to pay for the transaction. e.g. cash, credit card, gift card etc.",
						"enum": [
							"GENERIC",
							"CASH",
							"CREDIT_CARD",
							"DEBIT_CARD",
							"CASH_CARD",
							"GIFT_CARD",
							"GIFT_CERTIFICATE",
							"HOUSE_ACCOUNT",
							"PROPERTY_MANAGEMENT",
							"ACCOUNTS_RECEIVABLE",
							"ROOM_CHARGE",
							"SAVED_CUSTOMER",
							"CAMPUS_CARD",
							"MEAL_VOUCHER",
							"CHECK",
							"ELECTRONIC_BENEFIT_TRANSFER_CASH",
							"ELECTRONIC_BENEFIT_TRANSFER_FOOD_STAMP",
							"DRIVE_OR_WALK_OFF",
							"MANUFACTURER_COUPON",
							"MONEY_ORDER",
							"FLEXIBLE_SPENDING_ACCOUNT",
							"LOCAL_ACCOUNT",
							"WIC_ELECTRONIC",
							"WIC_SMARTCARD",
							"TRAVELERS_CHECK",
							"LOYALTY_POINTS",
							"STORED_VALUE",
							"DONATION",
							"SMART_WIC",
							"MOBILE",
							"VOUCHER"
						]
					},
					"typeLabel": {
						"type": "string",
						"description": "Used for values not in the type enum. You must specify the type field to use this field."
					},
					"usage": {
						"type": "string",
						"description": "The purpose for which the tender was used in the context of the original transaction.",
						"enum": [
							"PAYMENT",
							"REFUND",
							"CHANGE",
							"CASHBACK",
							"PRE_AUTHORIZATION",
							"CASH_OFFICE_AMOUNT",
							"CASH_OFFICE_OVER",
							"CASH_OFFICE_SHORT"
						]
					},
					"voidInfo": {
						"$ref": "#/components/schemas/VoidInfo"
					}
				},
				"description": "Tender Information associated with the transaction."
			},
			"TenderRewardApprovalInfo": {
				"type": "object",
				"properties": {
					"approvalRequestedCount": {
						"type": "integer",
						"description": "Number of times customer needs to approve a tender reward",
						"format": "int32"
					},
					"approvedCount": {
						"type": "integer",
						"description": "Number of times customer approved tender reward request",
						"format": "int32"
					}
				},
				"description": "Contains customer approval information for the tender reward"
			},
			"TenderRewardInfo": {
				"type": "object",
				"properties": {
					"amount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"appliedDateTimeUtc": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"approvedByEmployee": {
						"$ref": "#/components/schemas/EmployeeInfo"
					},
					"chargebacks": {
						"type": "array",
						"description": "List of entities like departments, suppliers, or retailers and the amounts of the tender reward those entities are responsible for.",
						"items": {
							"$ref": "#/components/schemas/ChargebackInfo"
						}
					},
					"couponId": {
						"type": "string",
						"description": "External identification of the coupon"
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"id": {
						"type": "string",
						"description": "Id of the tender reward as understood by POS system. Unique within site."
					},
					"internalId": {
						"type": "string",
						"description": "tender reward id in the context of the transaction. Allows for identifying actual instance of the tender reward. More than one item can have same tender reward internal id."
					},
					"isTaxable": {
						"type": "boolean",
						"description": "Boolean value of Taxable"
					},
					"isVoided": {
						"type": "boolean",
						"description": "True, in case the tender reward was voided, otherwise False."
					},
					"loyaltyAccountInfoId": {
						"type": "string",
						"description": "Internal identification of the loyalty account info, if the loyalty program was a reason for granting the tender reward."
					},
					"name": {
						"type": "string",
						"description": "Name of the tender reward."
					},
					"pointsRedeemed": {
						"type": "integer",
						"description": "Loyalty points that were used to receive this tender reward",
						"format": "int32"
					},
					"rewardReason": {
						"type": "string",
						"description": "Specified reason for applied tender reward."
					},
					"rewardType": {
						"type": "string",
						"description": "Type of the tender reward",
						"enum": [
							"GENERIC",
							"COUPON",
							"COMBO",
							"COMPENSATION",
							"TENDER_BASED",
							"QUANTITY",
							"LOYALTY",
							"SPECIAL_PRICE"
						]
					},
					"rewardTypeLabel": {
						"type": "string",
						"description": "Used for values not in the rewardType enum. You must specify the rewardType field to use this field."
					},
					"tenderRewardApprovalInfo": {
						"$ref": "#/components/schemas/TenderRewardApprovalInfo"
					},
					"voidInfo": {
						"$ref": "#/components/schemas/VoidInfo"
					}
				},
				"description": "Tender Reward Information associated with the transaction. Tender rewards are applied to this transaction."
			},
			"TenderSummaryInfo": {
				"type": "object",
				"properties": {
					"amount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"count": {
						"type": "integer",
						"description": "Total Count of how many units there are of this denomination",
						"format": "int32"
					},
					"id": {
						"type": "string",
						"description": "TenderId that identifies the tender for this denomination"
					},
					"name": {
						"type": "string",
						"description": "The name of the tender used to pay for the transaction"
					},
					"transactionType": {
						"type": "string",
						"description": "The type of the transaction",
						"enum": [
							"SALES",
							"RETURN",
							"TENDER_EXCHANGE"
						]
					},
					"type": {
						"type": "string",
						"description": "The type of the tender. e.g. cash, credit card, gift card etc",
						"enum": [
							"GENERIC",
							"CASH",
							"CREDIT_CARD",
							"DEBIT_CARD",
							"CASH_CARD",
							"GIFT_CARD",
							"GIFT_CERTIFICATE",
							"HOUSE_ACCOUNT",
							"PROPERTY_MANAGEMENT",
							"ACCOUNTS_RECEIVABLE",
							"ROOM_CHARGE",
							"SAVED_CUSTOMER",
							"CAMPUS_CARD",
							"MEAL_VOUCHER",
							"CHECK",
							"ELECTRONIC_BENEFIT_TRANSFER_CASH",
							"ELECTRONIC_BENEFIT_TRANSFER_FOOD_STAMP",
							"DRIVE_OR_WALK_OFF",
							"MANUFACTURER_COUPON",
							"MONEY_ORDER",
							"FLEXIBLE_SPENDING_ACCOUNT",
							"LOCAL_ACCOUNT",
							"WIC_ELECTRONIC",
							"WIC_SMARTCARD",
							"TRAVELERS_CHECK",
							"LOYALTY_POINTS",
							"STORED_VALUE",
							"DONATION",
							"SMART_WIC",
							"MOBILE",
							"VOUCHER"
						]
					},
					"typeLabel": {
						"type": "string",
						"description": "Used for values not in the type enum. You must specify the type field to use this field"
					}
				},
				"description": "Tender information for end of day summary"
			},
			"TenderWICInfo": {
				"type": "object",
				"properties": {
					"benefitIssuingEntity": {
						"type": "string",
						"description": "ID of the entity that most recently issued benefits to the card that was used in the transaction."
					},
					"cardAcceptorTerminalID": {
						"type": "string",
						"description": "PINPAD unique identifier"
					},
					"cardSignature": {
						"type": "string",
						"description": "Returns when payment is successful."
					},
					"discountAmount": {
						"type": "number",
						"description": "Total of any amounts that were deducted from the purchase price because of a coupon or special discount (for the items purchased via sWIC)."
					},
					"epsresponseCode": {
						"type": "string"
					},
					"firstDateToSpend": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"listOfWICItems": {
						"type": "array",
						"description": "List of eligible WIC items.",
						"items": {
							"$ref": "#/components/schemas/EligibleItemInfo"
						}
					},
					"stateCode": {
						"type": "string",
						"description": "State code of the entity that issued benefits to the card that was used in the transaction."
					},
					"systemTraceAuditNumber": {
						"type": "string",
						"description": "Unique store generated transaction tracking number per daily submission."
					},
					"wiccardNumber": {
						"type": "string"
					}
				},
				"description": "Includes WIC related information for Tender"
			},
			"ThirdPartyCoverage": {
				"type": "object",
				"properties": {
					"thirdPartyCoverageAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"thirdPartyCoverageTaxAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"thirdPartyId": {
						"type": "string",
						"description": "Id of the third party coverage."
					}
				},
				"description": "List of information about third party coverage or insurance."
			},
			"TicketInfo": {
				"required": [
					"coupons",
					"issueDate",
					"ticketNumber",
					"ticketType"
				],
				"type": "object",
				"properties": {
					"coupons": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "The coupons.",
						"items": {
							"$ref": "#/components/schemas/TravelCouponInfo"
						}
					},
					"issueDate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"ticketNumber": {
						"pattern": "[a-zA-Z0-9]{10,13}",
						"type": "string",
						"description": "The ticket number."
					},
					"ticketType": {
						"type": "string",
						"description": "The ticket type.",
						"enum": [
							"UNKNOWN",
							"ELECTRONIC",
							"PAPER"
						]
					}
				},
				"description": "The Class Ticket info."
			},
			"TimeZoneInfo": {
				"type": "object",
				"properties": {
					"timeZone": {
						"type": "string",
						"description": "Time Zone based on ZoneId.",
						"example": "Europe/Prague"
					}
				},
				"description": "Time zone according to TZDB."
			},
			"TopicIdData": {
				"required": [
					"name"
				],
				"type": "object",
				"properties": {
					"name": {
						"maxLength": 256,
						"minLength": 1,
						"pattern": "\\p{Alpha}[\\w-]*",
						"type": "string"
					}
				}
			},
			"TotalsInfo": {
				"type": "object",
				"properties": {
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"discountAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"grandAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"grossAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"grossReturnsAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"netAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"returnItemsTaxExclusive": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"returnItemsTaxInclusive": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"taxExclusive": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"taxExemptAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"taxInclusive": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"voidsAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"wicInfo": {
						"$ref": "#/components/schemas/TotalsWICInfo"
					}
				},
				"description": "Totals"
			},
			"TotalsWICInfo": {
				"type": "object",
				"properties": {
					"notToExceedAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"notToExceedLostAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					},
					"wicAmount": {
						"$ref": "#/components/schemas/MoneyInfo"
					}
				},
				"description": "WIC information about the transaction totals."
			},
			"TouchPointInfo": {
				"type": "object",
				"properties": {
					"group": {
						"type": "string",
						"description": "A logical grouping of touch point. A touch point can be any client, e.g. a POS Terminal, Self Checkout."
					},
					"id": {
						"type": "string",
						"description": "The ID of the terminal / touch point / POS that has an association with the transaction."
					},
					"referenceId": {
						"type": "string",
						"description": "Additional touch point identification."
					},
					"type": {
						"type": "string",
						"description": "The register type in which the transaction has association with such as: POS, Mobile, e-Commerce, fuel POS etc."
					}
				},
				"description": "Touch point info participating with the transaction."
			},
			"Transaction": {
				"required": [
					"transactionType"
				],
				"type": "object",
				"properties": {
					"checkOutType": {
						"type": "string",
						"description": "Checkout Type (Self, Assisted, Unknown, etc.)",
						"enum": [
							"SELF_CHECKOUT",
							"ASSISTED_CHECKOUT",
							"ASSISTED_SELF_CHECKOUT",
							"UNKNOWN"
						]
					},
					"checkOutTypeLabel": {
						"type": "string",
						"description": "Checkout Type Label. Used for values not in the checkOutType enum. You must specify the checkOutType field to use this field."
					},
					"coupons": {
						"type": "array",
						"description": "Coupons / Vouchers applied",
						"items": {
							"$ref": "#/components/schemas/CouponInfo"
						}
					},
					"customProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
						},
						"description": "Custom Properties contains a list of fields that is unique to a data provider. Each data provider may have their own list of fields very specific to them. Fields appearing are not in global TDM model and are not part of it for all the maps"
					},
					"customer": {
						"$ref": "#/components/schemas/CustomerInfo"
					},
					"customerCount": {
						"type": "integer",
						"description": "Number of customers (guests) related to this transaction.",
						"format": "int32"
					},
					"customerPrograms": {
						"type": "array",
						"description": "Information on customer program accounts.",
						"items": {
							"$ref": "#/components/schemas/CustomerProgramAccountInfo"
						}
					},
					"employees": {
						"type": "array",
						"description": "List of employees who participated on the transaction.",
						"items": {
							"$ref": "#/components/schemas/EmployeeInfo"
						}
					},
					"groupId": {
						"type": "string",
						"description": "Identifies the group of transactions that have the same customers and customer counts. Usually the grouping of split transactions."
					},
					"isDeleted": {
						"type": "boolean",
						"description": "True if the transaction was ever deleted"
					},
					"isOpen": {
						"type": "boolean",
						"description": "This flag indicates whether the transaction is still open. Open transactions have not been payed for and can still be appended with new items."
					},
					"isRecalled": {
						"type": "boolean",
						"description": "True if the transaction was ever recalled or retrieved."
					},
					"isResumed": {
						"type": "boolean",
						"description": "Flag if the transaction was ever recalled and resumed."
					},
					"isSuspended": {
						"type": "boolean",
						"description": "True if the transaction was ever saved / suspended"
					},
					"isVoided": {
						"type": "boolean",
						"description": "True when transaction is marked as voided."
					},
					"items": {
						"type": "array",
						"description": "List of items",
						"items": {
							"$ref": "#/components/schemas/Item"
						}
					},
					"localCurrency": {
						"$ref": "#/components/schemas/CurrencyInfo"
					},
					"location": {
						"$ref": "#/components/schemas/Location"
					},
					"loyaltyAccount": {
						"type": "array",
						"description": "Information on loyalty accounts. In Hospitality multiple loyalty accounts can be awarded in single transaction.",
						"items": {
							"$ref": "#/components/schemas/CustomerProgramAccountInfo"
						}
					},
					"operatorBypassApprovals": {
						"type": "array",
						"description": "List of information regarding operator bypass approvals at transaction levels.",
						"items": {
							"$ref": "#/components/schemas/OperatorBypassApprovalInfo"
						}
					},
					"orders": {
						"type": "array",
						"description": "List of orders",
						"items": {
							"$ref": "#/components/schemas/OrderInfo"
						}
					},
					"pharmacyDetails": {
						"$ref": "#/components/schemas/PharmacyDetails"
					},
					"receiptDeliveryInfo": {
						"$ref": "#/components/schemas/ReceiptDeliveryInfo"
					},
					"receiptId": {
						"type": "string",
						"description": "Identification of the transaction/receipt as presented to the customer (shown or printed on the receipt)"
					},
					"receiptInfo": {
						"$ref": "#/components/schemas/ReceiptInfo"
					},
					"revenueCenter": {
						"$ref": "#/components/schemas/RevenueCenterInfo"
					},
					"surcharges": {
						"type": "array",
						"description": "List of transaction related surcharges.",
						"items": {
							"$ref": "#/components/schemas/SurchargeInfo"
						}
					},
					"suspendedReason": {
						"type": "string",
						"description": "Reason for suspending the transaction.",
						"enum": [
							"UNKNOWN",
							"DRIVE_OFF",
							"UNPAID",
							"PAUSE",
							"PREPAY"
						]
					},
					"suspendedReasonLabel": {
						"type": "string",
						"description": "Contains reason for suspending transaction in case SuspendedReason is selected as UNKNOWN."
					},
					"tenders": {
						"type": "array",
						"description": "List of tenders",
						"items": {
							"$ref": "#/components/schemas/TenderInfo"
						}
					},
					"totalTaxes": {
						"type": "array",
						"description": "Information on taxes. This contains totals including all other tax sections in this transaction.",
						"items": {
							"$ref": "#/components/schemas/TaxInfo"
						}
					},
					"totals": {
						"$ref": "#/components/schemas/TotalsInfo"
					},
					"transactionDiscounts": {
						"type": "array",
						"description": "List of discounts applied to the entire transaction.",
						"items": {
							"$ref": "#/components/schemas/DiscountInfo"
						}
					},
					"transactionPromotions": {
						"type": "array",
						"description": "List of promotions applied to the entire transaction.",
						"items": {
							"$ref": "#/components/schemas/PromotionInfo"
						}
					},
					"transactionType": {
						"type": "string",
						"description": "Identifies the type of the sale or return transaction.",
						"enum": [
							"SALES",
							"RETURN",
							"TENDER_EXCHANGE"
						]
					},
					"voidInfo": {
						"$ref": "#/components/schemas/VoidInfo"
					}
				},
				"description": "Sales Transaction - in Hospitality this is called Check (and not diff between two checks) - in Retail this is called Transaction -Transaction is identified by an external id that needs to be unique within site. - Primary key of the transaction message is site_info.eu_id + id."
			},
			"TravelCouponInfo": {
				"required": [
					"couponNumber",
					"couponStatus",
					"flightSegmentId"
				],
				"type": "object",
				"properties": {
					"couponNumber": {
						"pattern": "[a-zA-Z0-9]{9}",
						"type": "string"
					},
					"couponStatus": {
						"type": "string",
						"enum": [
							"UNKNOWN",
							"ACCEPTABLE",
							"UNACCEPTABLE"
						]
					},
					"flightSegmentId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"description": "The Class TravelCouponInfo."
			},
			"TravelLoyaltyProgramInfo": {
				"required": [
					"airline",
					"level",
					"memberNumber",
					"programId"
				],
				"type": "object",
				"properties": {
					"airline": {
						"$ref": "#/components/schemas/AirlineInfo"
					},
					"level": {
						"type": "string",
						"description": "The level."
					},
					"memberNumber": {
						"pattern": "[a-zA-Z0-9]{5,20}",
						"type": "string",
						"description": "The member number."
					},
					"programId": {
						"type": "string",
						"description": "The program id."
					}
				},
				"description": "The Class TravelLoyaltyProgramInfo."
			},
			"UpdateCanonicalTLogDataRequest": {
				"required": [
					"tlogUpdateData"
				],
				"type": "object",
				"properties": {
					"tlogUpdateData": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "List of one or more CanonicalTLogUpdateData",
						"items": {
							"$ref": "#/components/schemas/CanonicalTLogUpdateData"
						}
					}
				},
				"description": "UpdateCanonicalTLogDataRequest contains a collection of one or more CanonicalTLogUpdateData objects to be updated"
			},
			"UpdateRawTLogDataRequest": {
				"required": [
					"rawTLogs"
				],
				"type": "object",
				"properties": {
					"rawTLogs": {
						"maxItems": 2147483647,
						"minItems": 1,
						"type": "array",
						"description": "List of one or more RawTLogUpdateData",
						"items": {
							"$ref": "#/components/schemas/RawTLogData"
						}
					}
				},
				"description": "UpdateRawTLogDataRequest contains a collection of one or more RawTLogUpdateData objects to be updated"
			},
			"UrlEndpointData": {
				"required": [
					"description",
					"destinationUrl",
					"name"
				],
				"type": "object",
				"properties": {
					"description": {
						"type": "string"
					},
					"destinationUrl": {
						"type": "string"
					},
					"name": {
						"maxLength": 200,
						"minLength": 1,
						"pattern": "\\p{Alpha}[\\w-]*",
						"type": "string"
					}
				}
			},
			"UsDestinationAddressInfo": {
				"required": [
					"address",
					"city",
					"country",
					"idocType",
					"state",
					"zipcode"
				],
				"type": "object",
				"properties": {
					"address": {
						"pattern": "([a-zA-Z0-9\\s,'\\-]){1,64}",
						"type": "string",
						"description": "The address."
					},
					"city": {
						"pattern": "([a-zA-Z\\s]){1,64}",
						"type": "string",
						"description": "The city."
					},
					"country": {
						"type": "string",
						"description": "The country."
					},
					"idocType": {
						"type": "string",
						"description": "The idoc type.",
						"enum": [
							"UNKNOWN_DOCUMENT",
							"COUNTRY_OF_RESIDENCE",
							"PASSPORT",
							"RESIDENT_CARD",
							"REDRESS_NUMBER",
							"US_DESTINATION_ADDRESS",
							"EMERGENCY_CONTACT_INFORMATION",
							"VISA",
							"I94_FORM",
							"MILITARY_ID",
							"NATIONAL_IDENTITY_CARD",
							"ALIEN_REGISTRATION_NUMBER",
							"BORDER_CROSSING_CARD",
							"REFUGEE_TRAVEL_DOCUMENT",
							"PILOT_LICENSE",
							"KNOWN_TRAVELER_NUMBER",
							"NATURALIZATION_CERTIFICATE",
							"OTHER"
						]
					},
					"state": {
						"pattern": "([a-zA-Z\\s]){1,64}",
						"type": "string",
						"description": "The state."
					},
					"zipcode": {
						"pattern": "[a-zA-Z0-9]{1,16}",
						"type": "string",
						"description": "The zip code."
					}
				},
				"description": "The Class US destination address info."
			},
			"VariationInfo": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Id of the variation. Unique within one site."
					},
					"name": {
						"type": "string",
						"description": "Name of the variation."
					}
				},
				"description": "Information on the variant. e.g. a t-shirt can be XL-sized and blue."
			},
			"VehicleInfo": {
				"type": "object",
				"properties": {
					"additionalDescription": {
						"type": "string",
						"description": "Contains additional information about the Vehicle."
					},
					"color": {
						"type": "string",
						"description": "Color of the Vehicle."
					},
					"licensePlateNumber": {
						"type": "string",
						"description": "License plate number of the vehicle"
					},
					"model": {
						"type": "string",
						"description": "Vehicle brand and model."
					}
				},
				"description": "Information associated with the Vehicle."
			},
			"VisaInfo": {
				"required": [
					"expirationDate",
					"firstName",
					"idocType",
					"issueDate",
					"lastName",
					"passportNumber",
					"visaType"
				],
				"type": "object",
				"properties": {
					"expirationDate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"firstName": {
						"pattern": "[a-z,A-Z]{2,25}",
						"type": "string",
						"description": "The first name."
					},
					"idocType": {
						"type": "string",
						"description": "The idoc type.",
						"enum": [
							"UNKNOWN_DOCUMENT",
							"COUNTRY_OF_RESIDENCE",
							"PASSPORT",
							"RESIDENT_CARD",
							"REDRESS_NUMBER",
							"US_DESTINATION_ADDRESS",
							"EMERGENCY_CONTACT_INFORMATION",
							"VISA",
							"I94_FORM",
							"MILITARY_ID",
							"NATIONAL_IDENTITY_CARD",
							"ALIEN_REGISTRATION_NUMBER",
							"BORDER_CROSSING_CARD",
							"REFUGEE_TRAVEL_DOCUMENT",
							"PILOT_LICENSE",
							"KNOWN_TRAVELER_NUMBER",
							"NATURALIZATION_CERTIFICATE",
							"OTHER"
						]
					},
					"issueDate": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"lastName": {
						"pattern": "[a-zA-Z0-9]{1,35}",
						"type": "string",
						"description": "The last name"
					},
					"passportNumber": {
						"pattern": "[a-zA-Z0-9]{1,32}",
						"type": "string",
						"description": "The passport number."
					},
					"visaType": {
						"type": "string",
						"description": "The visa type."
					}
				},
				"description": "The Class Visa info."
			},
			"VoidInfo": {
				"type": "object",
				"properties": {
					"isAuto": {
						"type": "boolean",
						"description": "True, if this void has been applied automatically."
					},
					"isCostImpacted": {
						"type": "boolean",
						"description": "True, if this void has caused any cost to the retailer."
					},
					"itemVoidTime": {
						"$ref": "#/components/schemas/DateTimeInfo"
					},
					"voidApprovedByEmployee": {
						"$ref": "#/components/schemas/EmployeeInfo"
					},
					"voidReason": {
						"type": "string",
						"description": "The reason for voiding the item."
					},
					"voidedByEmployee": {
						"$ref": "#/components/schemas/EmployeeInfo"
					}
				},
				"description": "Void Information related to the coupon."
			},
			"WeightInfo": {
				"required": [
					"weightAmount",
					"weightUnitOfMeasure"
				],
				"type": "object",
				"properties": {
					"weightAmount": {
						"maximum": 199,
						"minimum": 0,
						"type": "number",
						"description": "The weight amount."
					},
					"weightUnitOfMeasure": {
						"type": "string",
						"description": "The weight unit of measure.",
						"enum": [
							"POUNDS",
							"KILOGRAMS"
						]
					}
				},
				"description": "The Class Weight info."
			}
		}
	}
}
